
exam_2023_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005cc4  08005cc4  00015cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d4c  08005d4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d4c  08005d4c  00015d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d54  08005d54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000070  08005dcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005dcc  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b5b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c8  00000000  00000000  00031bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00033ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00034e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f78  00000000  00000000  00035ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001207d  00000000  00000000  0005cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2b93  00000000  00000000  0006ec95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161828  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  00161878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cac 	.word	0x08005cac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005cac 	.word	0x08005cac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fc42 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f84c 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f9da 	bl	8000938 <MX_GPIO_Init>
  MX_DMA_Init();
 8000584:	f000 f9ba 	bl	80008fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f988 	bl	800089c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800058c:	f000 f896 	bl	80006bc <MX_TIM3_Init>
  MX_TIM16_Init();
 8000590:	f000 f90c 	bl	80007ac <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim16);// Iniciamos el contador del Timer 16 en modo Interrupción
 8000594:	4819      	ldr	r0, [pc, #100]	; (80005fc <main+0x88>)
 8000596:	f002 fd05 	bl	8002fa4 <HAL_TIM_Base_Start_IT>


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);//  Iniciamos el PWM en el Timmer 3 en el canal 1 (PA6)
 800059a:	2100      	movs	r1, #0
 800059c:	4818      	ldr	r0, [pc, #96]	; (8000600 <main+0x8c>)
 800059e:	f002 fdd3 	bl	8003148 <HAL_TIM_PWM_Start>

  maxDuty = htim3.Instance->ARR;// Definimos la variable maxDuty igual al registro ARR
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <main+0x8c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <main+0x90>)
 80005ac:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // se va aumentado el valor del ciclo para conseguir aumentar el brillo
		  for (duty = 0; duty < maxDuty; ++duty) {
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <main+0x94>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	801a      	strh	r2, [r3, #0]
 80005b4:	e01a      	b.n	80005ec <main+0x78>
			htim3.Instance->CCR1 = duty; // El ancho del  pulso del canal 0 (PA6) va a ir incrementando hasta llegar al ARR
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <main+0x94>)
 80005b8:	881a      	ldrh	r2, [r3, #0]
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <main+0x8c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	635a      	str	r2, [r3, #52]	; 0x34
	        sprintf(uartTxBuffer, "PWM: %d\r\n", duty);
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <main+0x94>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <main+0x98>)
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <main+0x9c>)
 80005ca:	f004 ff01 	bl	80053d0 <siprintf>
	        HAL_UART_Transmit(&huart2, (uint8_t*)uartTxBuffer, 8, 20);
 80005ce:	2314      	movs	r3, #20
 80005d0:	2208      	movs	r2, #8
 80005d2:	490f      	ldr	r1, [pc, #60]	; (8000610 <main+0x9c>)
 80005d4:	480f      	ldr	r0, [pc, #60]	; (8000614 <main+0xa0>)
 80005d6:	f003 fe1f 	bl	8004218 <HAL_UART_Transmit>
			HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fc8c 	bl	8000ef8 <HAL_Delay>
		  for (duty = 0; duty < maxDuty; ++duty) {
 80005e0:	4b09      	ldr	r3, [pc, #36]	; (8000608 <main+0x94>)
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <main+0x94>)
 80005ea:	801a      	strh	r2, [r3, #0]
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <main+0x94>)
 80005ee:	881a      	ldrh	r2, [r3, #0]
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <main+0x90>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d3de      	bcc.n	80005b6 <main+0x42>
 80005f8:	e7d9      	b.n	80005ae <main+0x3a>
 80005fa:	bf00      	nop
 80005fc:	200000d8 	.word	0x200000d8
 8000600:	2000008c 	.word	0x2000008c
 8000604:	200001f2 	.word	0x200001f2
 8000608:	200001f0 	.word	0x200001f0
 800060c:	08005cc4 	.word	0x08005cc4
 8000610:	200001f4 	.word	0x200001f4
 8000614:	20000124 	.word	0x20000124

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	; 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 feca 	bl	80053c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f001 f947 	bl	80018d0 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f9dc 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000666:	230a      	movs	r3, #10
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f97e 	bl	800197c <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000686:	f000 f9bd 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2303      	movs	r3, #3
 8000690:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2104      	movs	r1, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fd46 	bl	8002134 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ae:	f000 f9a9 	bl	8000a04 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3758      	adds	r7, #88	; 0x58
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	; 0x38
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006dc:	463b      	mov	r3, r7
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <MX_TIM3_Init+0xe8>)
 80006f0:	4a2d      	ldr	r2, [pc, #180]	; (80007a8 <MX_TIM3_Init+0xec>)
 80006f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_TIM3_Init+0xe8>)
 80006f6:	224f      	movs	r2, #79	; 0x4f
 80006f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_TIM3_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000702:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <MX_TIM3_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000714:	4823      	ldr	r0, [pc, #140]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000716:	f002 fbed 	bl	8002ef4 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000720:	f000 f970 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800072e:	4619      	mov	r1, r3
 8000730:	481c      	ldr	r0, [pc, #112]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000732:	f002 ff23 	bl	800357c <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800073c:	f000 f962 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000740:	4818      	ldr	r0, [pc, #96]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000742:	f002 fc9f 	bl	8003084 <HAL_TIM_PWM_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800074c:	f000 f95a 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000760:	f003 fc06 	bl	8003f70 <HAL_TIMEx_MasterConfigSynchronization>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800076a:	f000 f94b 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076e:	2360      	movs	r3, #96	; 0x60
 8000770:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000786:	f002 fde5 	bl	8003354 <HAL_TIM_PWM_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000790:	f000 f938 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_TIM3_Init+0xe8>)
 8000796:	f000 f993 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 800079a:	bf00      	nop
 800079c:	3738      	adds	r7, #56	; 0x38
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000008c 	.word	0x2000008c
 80007a8:	40000400 	.word	0x40000400

080007ac <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b092      	sub	sp, #72	; 0x48
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
 80007c2:	615a      	str	r2, [r3, #20]
 80007c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	222c      	movs	r2, #44	; 0x2c
 80007ca:	2100      	movs	r1, #0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fdf7 	bl	80053c0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <MX_TIM16_Init+0xe8>)
 80007d4:	4a30      	ldr	r2, [pc, #192]	; (8000898 <MX_TIM16_Init+0xec>)
 80007d6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80007d8:	4b2e      	ldr	r3, [pc, #184]	; (8000894 <MX_TIM16_Init+0xe8>)
 80007da:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <MX_TIM16_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000-1;
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <MX_TIM16_Init+0xe8>)
 80007e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80007ec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MX_TIM16_Init+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007f4:	4b27      	ldr	r3, [pc, #156]	; (8000894 <MX_TIM16_Init+0xe8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_TIM16_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000800:	4824      	ldr	r0, [pc, #144]	; (8000894 <MX_TIM16_Init+0xe8>)
 8000802:	f002 fb77 	bl	8002ef4 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 800080c:	f000 f8fa 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000810:	4820      	ldr	r0, [pc, #128]	; (8000894 <MX_TIM16_Init+0xe8>)
 8000812:	f002 fc37 	bl	8003084 <HAL_TIM_PWM_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800081c:	f000 f8f2 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000820:	2360      	movs	r3, #96	; 0x60
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000828:	2300      	movs	r3, #0
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000840:	2200      	movs	r2, #0
 8000842:	4619      	mov	r1, r3
 8000844:	4813      	ldr	r0, [pc, #76]	; (8000894 <MX_TIM16_Init+0xe8>)
 8000846:	f002 fd85 	bl	8003354 <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8000850:	f000 f8d8 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <MX_TIM16_Init+0xe8>)
 8000878:	f003 fc02 	bl	8004080 <HAL_TIMEx_ConfigBreakDeadTime>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000882:	f000 f8bf 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000886:	4803      	ldr	r0, [pc, #12]	; (8000894 <MX_TIM16_Init+0xe8>)
 8000888:	f000 f91a 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 800088c:	bf00      	nop
 800088e:	3748      	adds	r7, #72	; 0x48
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200000d8 	.word	0x200000d8
 8000898:	40014400 	.word	0x40014400

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_USART2_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART2_UART_Init+0x58>)
 80008e0:	f003 fc4c 	bl	800417c <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f88b 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000124 	.word	0x20000124
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_DMA_Init+0x38>)
 8000904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <MX_DMA_Init+0x38>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6493      	str	r3, [r2, #72]	; 0x48
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_DMA_Init+0x38>)
 8000910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2010      	movs	r0, #16
 8000920:	f000 fbe9 	bl	80010f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000924:	2010      	movs	r0, #16
 8000926:	f000 fc02 	bl	800112e <HAL_NVIC_EnableIRQ>

}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_GPIO_Init+0xc4>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <MX_GPIO_Init+0xc4>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_GPIO_Init+0xc4>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_GPIO_Init+0xc4>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a24      	ldr	r2, [pc, #144]	; (80009fc <MX_GPIO_Init+0xc4>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_GPIO_Init+0xc4>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <MX_GPIO_Init+0xc4>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <MX_GPIO_Init+0xc4>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_GPIO_Init+0xc4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <MX_GPIO_Init+0xc4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <MX_GPIO_Init+0xc4>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_GPIO_Init+0xc4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2120      	movs	r1, #32
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f000 ff65 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <MX_GPIO_Init+0xc8>)
 80009d2:	f000 fdad 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f000 fd9e 	bl	8001530 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f4:	bf00      	nop
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000800 	.word	0x48000800

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	; 0x60
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <HAL_TIM_Base_MspInit+0x5c>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d10c      	bne.n	8000a84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_TIM_Base_MspInit+0x60>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <HAL_TIM_Base_MspInit+0x60>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6593      	str	r3, [r2, #88]	; 0x58
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_TIM_Base_MspInit+0x60>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a82:	e010      	b.n	8000aa6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <HAL_TIM_Base_MspInit+0x64>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d10b      	bne.n	8000aa6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_TIM_Base_MspInit+0x60>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <HAL_TIM_Base_MspInit+0x60>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <HAL_TIM_Base_MspInit+0x60>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40000400 	.word	0x40000400
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40014400 	.word	0x40014400

08000ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <HAL_TIM_MspPostInit+0xac>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d11d      	bne.n	8000b1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <HAL_TIM_MspPostInit+0xb0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <HAL_TIM_MspPostInit+0xb0>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b20      	ldr	r3, [pc, #128]	; (8000b70 <HAL_TIM_MspPostInit+0xb0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000afa:	2340      	movs	r3, #64	; 0x40
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f000 fd0a 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000b1c:	e021      	b.n	8000b62 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM16)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <HAL_TIM_MspPostInit+0xb4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d11c      	bne.n	8000b62 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_TIM_MspPostInit+0xb0>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_TIM_MspPostInit+0xb0>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_TIM_MspPostInit+0xb0>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000b52:	230e      	movs	r3, #14
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <HAL_TIM_MspPostInit+0xb8>)
 8000b5e:	f000 fce7 	bl	8001530 <HAL_GPIO_Init>
}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40000400 	.word	0x40000400
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40014400 	.word	0x40014400
 8000b78:	48000400 	.word	0x48000400

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0ac      	sub	sp, #176	; 0xb0
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2288      	movs	r2, #136	; 0x88
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 fc0f 	bl	80053c0 <memset>
  if(huart->Instance==USART2)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a3a      	ldr	r2, [pc, #232]	; (8000c90 <HAL_UART_MspInit+0x114>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d16c      	bne.n	8000c86 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 fcdf 	bl	800257c <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bc4:	f7ff ff1e 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bcc:	4a31      	ldr	r2, [pc, #196]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be4:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bec:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c10:	2307      	movs	r3, #7
 8000c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f000 fc86 	bl	8001530 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c26:	4a1d      	ldr	r2, [pc, #116]	; (8000c9c <HAL_UART_MspInit+0x120>)
 8000c28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c5a:	480f      	ldr	r0, [pc, #60]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c5c:	f000 fa82 	bl	8001164 <HAL_DMA_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000c66:	f7ff fecd 	bl	8000a04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c6e:	671a      	str	r2, [r3, #112]	; 0x70
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2026      	movs	r0, #38	; 0x26
 8000c7c:	f000 fa3b 	bl	80010f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c80:	2026      	movs	r0, #38	; 0x26
 8000c82:	f000 fa54 	bl	800112e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c86:	bf00      	nop
 8000c88:	37b0      	adds	r7, #176	; 0xb0
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40021000 	.word	0x40021000
 8000c98:	200001a8 	.word	0x200001a8
 8000c9c:	4002006c 	.word	0x4002006c

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f8e4 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <DMA1_Channel6_IRQHandler+0x10>)
 8000cfa:	f000 fb6a 	bl	80013d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200001a8 	.word	0x200001a8

08000d08 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <USART2_IRQHandler+0x10>)
 8000d0e:	f003 fb17 	bl	8004340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000124 	.word	0x20000124

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f004 fb0e 	bl	800536c <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20018000 	.word	0x20018000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000214 	.word	0x20000214
 8000d84:	20000230 	.word	0x20000230

08000d88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	; (8000dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <LoopForever+0xe>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	; (8000df8 <LoopForever+0x16>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f004 facd 	bl	8005378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dde:	f7ff fbc9 	bl	8000574 <main>

08000de2 <LoopForever>:

LoopForever:
    b LoopForever
 8000de2:	e7fe      	b.n	8000de2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000df0:	08005d5c 	.word	0x08005d5c
  ldr r2, =_sbss
 8000df4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000df8:	2000022c 	.word	0x2000022c

08000dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_2_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_Init+0x3c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_Init+0x3c>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f962 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 f80f 	bl	8000e40 <HAL_InitTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e001      	b.n	8000e32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2e:	f7ff fdef 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d023      	beq.n	8000e9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_InitTick+0x70>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_InitTick+0x6c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f96d 	bl	800114a <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10f      	bne.n	8000e96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d809      	bhi.n	8000e90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f937 	bl	80010f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_InitTick+0x74>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e007      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e004      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e001      	b.n	8000ea0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000218 	.word	0x20000218

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000218 	.word	0x20000218

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff29 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff3e 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff31 	bl	8000fa4 <__NVIC_EnableIRQ>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffa2 	bl	800109c <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e098      	b.n	80012a8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b4d      	ldr	r3, [pc, #308]	; (80012b4 <HAL_DMA_Init+0x150>)
 800117e:	429a      	cmp	r2, r3
 8001180:	d80f      	bhi.n	80011a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <HAL_DMA_Init+0x154>)
 800118a:	4413      	add	r3, r2
 800118c:	4a4b      	ldr	r2, [pc, #300]	; (80012bc <HAL_DMA_Init+0x158>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	009a      	lsls	r2, r3, #2
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a48      	ldr	r2, [pc, #288]	; (80012c0 <HAL_DMA_Init+0x15c>)
 800119e:	641a      	str	r2, [r3, #64]	; 0x40
 80011a0:	e00e      	b.n	80011c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <HAL_DMA_Init+0x160>)
 80011aa:	4413      	add	r3, r2
 80011ac:	4a43      	ldr	r2, [pc, #268]	; (80012bc <HAL_DMA_Init+0x158>)
 80011ae:	fba2 2303 	umull	r2, r3, r2, r3
 80011b2:	091b      	lsrs	r3, r3, #4
 80011b4:	009a      	lsls	r2, r3, #2
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a42      	ldr	r2, [pc, #264]	; (80012c8 <HAL_DMA_Init+0x164>)
 80011be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2202      	movs	r2, #2
 80011c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80011d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800121a:	d039      	beq.n	8001290 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <HAL_DMA_Init+0x15c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d11a      	bne.n	800125c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <HAL_DMA_Init+0x168>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	f003 031c 	and.w	r3, r3, #28
 8001232:	210f      	movs	r1, #15
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	4924      	ldr	r1, [pc, #144]	; (80012cc <HAL_DMA_Init+0x168>)
 800123c:	4013      	ands	r3, r2
 800123e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001240:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_DMA_Init+0x168>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6859      	ldr	r1, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f003 031c 	and.w	r3, r3, #28
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	491d      	ldr	r1, [pc, #116]	; (80012cc <HAL_DMA_Init+0x168>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
 800125a:	e019      	b.n	8001290 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_DMA_Init+0x16c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	f003 031c 	and.w	r3, r3, #28
 8001268:	210f      	movs	r1, #15
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	4917      	ldr	r1, [pc, #92]	; (80012d0 <HAL_DMA_Init+0x16c>)
 8001272:	4013      	ands	r3, r2
 8001274:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_DMA_Init+0x16c>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6859      	ldr	r1, [r3, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f003 031c 	and.w	r3, r3, #28
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	4911      	ldr	r1, [pc, #68]	; (80012d0 <HAL_DMA_Init+0x16c>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40020407 	.word	0x40020407
 80012b8:	bffdfff8 	.word	0xbffdfff8
 80012bc:	cccccccd 	.word	0xcccccccd
 80012c0:	40020000 	.word	0x40020000
 80012c4:	bffdfbf8 	.word	0xbffdfbf8
 80012c8:	40020400 	.word	0x40020400
 80012cc:	400200a8 	.word	0x400200a8
 80012d0:	400204a8 	.word	0x400204a8

080012d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d008      	beq.n	80012fe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2204      	movs	r2, #4
 80012f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e022      	b.n	8001344 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 020e 	bic.w	r2, r2, #14
 800130c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f003 021c 	and.w	r2, r3, #28
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	2101      	movs	r1, #1
 800132c:	fa01 f202 	lsl.w	r2, r1, r2
 8001330:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001342:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d005      	beq.n	8001374 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2204      	movs	r2, #4
 800136c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	e029      	b.n	80013c8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 020e 	bic.w	r2, r2, #14
 8001382:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0201 	bic.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001398:	f003 021c 	and.w	r2, r3, #28
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	2101      	movs	r1, #1
 80013a2:	fa01 f202 	lsl.w	r2, r1, r2
 80013a6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4798      	blx	r3
    }
  }
  return status;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f003 031c 	and.w	r3, r3, #28
 80013f2:	2204      	movs	r2, #4
 80013f4:	409a      	lsls	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d026      	beq.n	800144c <HAL_DMA_IRQHandler+0x7a>
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d021      	beq.n	800144c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0204 	bic.w	r2, r2, #4
 8001424:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 021c 	and.w	r2, r3, #28
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	2104      	movs	r1, #4
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	2b00      	cmp	r3, #0
 8001440:	d071      	beq.n	8001526 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800144a:	e06c      	b.n	8001526 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f003 031c 	and.w	r3, r3, #28
 8001454:	2202      	movs	r2, #2
 8001456:	409a      	lsls	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d02e      	beq.n	80014be <HAL_DMA_IRQHandler+0xec>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d029      	beq.n	80014be <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10b      	bne.n	8001490 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 020a 	bic.w	r2, r2, #10
 8001486:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	f003 021c 	and.w	r2, r3, #28
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	2102      	movs	r1, #2
 800149e:	fa01 f202 	lsl.w	r2, r1, r2
 80014a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d038      	beq.n	8001526 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014bc:	e033      	b.n	8001526 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f003 031c 	and.w	r3, r3, #28
 80014c6:	2208      	movs	r2, #8
 80014c8:	409a      	lsls	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d02a      	beq.n	8001528 <HAL_DMA_IRQHandler+0x156>
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d025      	beq.n	8001528 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 020e 	bic.w	r2, r2, #14
 80014ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	f003 021c 	and.w	r2, r3, #28
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f202 	lsl.w	r2, r1, r2
 80014fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001526:	bf00      	nop
 8001528:	bf00      	nop
}
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	e17f      	b.n	8001840 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8171 	beq.w	800183a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_Init+0x40>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d130      	bne.n	80015d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a6:	2201      	movs	r2, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 0201 	and.w	r2, r3, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d118      	bne.n	8001610 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015e4:	2201      	movs	r2, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	f003 0201 	and.w	r2, r3, #1
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b03      	cmp	r3, #3
 800161a:	d017      	beq.n	800164c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d123      	bne.n	80016a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	691a      	ldr	r2, [r3, #16]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	6939      	ldr	r1, [r7, #16]
 800169c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0203 	and.w	r2, r3, #3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 80ac 	beq.w	800183a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b5f      	ldr	r3, [pc, #380]	; (8001860 <HAL_GPIO_Init+0x330>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e6:	4a5e      	ldr	r2, [pc, #376]	; (8001860 <HAL_GPIO_Init+0x330>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6613      	str	r3, [r2, #96]	; 0x60
 80016ee:	4b5c      	ldr	r3, [pc, #368]	; (8001860 <HAL_GPIO_Init+0x330>)
 80016f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016fa:	4a5a      	ldr	r2, [pc, #360]	; (8001864 <HAL_GPIO_Init+0x334>)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001724:	d025      	beq.n	8001772 <HAL_GPIO_Init+0x242>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <HAL_GPIO_Init+0x338>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d01f      	beq.n	800176e <HAL_GPIO_Init+0x23e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4e      	ldr	r2, [pc, #312]	; (800186c <HAL_GPIO_Init+0x33c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d019      	beq.n	800176a <HAL_GPIO_Init+0x23a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4d      	ldr	r2, [pc, #308]	; (8001870 <HAL_GPIO_Init+0x340>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0x236>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4c      	ldr	r2, [pc, #304]	; (8001874 <HAL_GPIO_Init+0x344>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00d      	beq.n	8001762 <HAL_GPIO_Init+0x232>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4b      	ldr	r2, [pc, #300]	; (8001878 <HAL_GPIO_Init+0x348>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x22e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4a      	ldr	r2, [pc, #296]	; (800187c <HAL_GPIO_Init+0x34c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_GPIO_Init+0x22a>
 8001756:	2306      	movs	r3, #6
 8001758:	e00c      	b.n	8001774 <HAL_GPIO_Init+0x244>
 800175a:	2307      	movs	r3, #7
 800175c:	e00a      	b.n	8001774 <HAL_GPIO_Init+0x244>
 800175e:	2305      	movs	r3, #5
 8001760:	e008      	b.n	8001774 <HAL_GPIO_Init+0x244>
 8001762:	2304      	movs	r3, #4
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x244>
 8001766:	2303      	movs	r3, #3
 8001768:	e004      	b.n	8001774 <HAL_GPIO_Init+0x244>
 800176a:	2302      	movs	r3, #2
 800176c:	e002      	b.n	8001774 <HAL_GPIO_Init+0x244>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_GPIO_Init+0x244>
 8001772:	2300      	movs	r3, #0
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	f002 0203 	and.w	r2, r2, #3
 800177a:	0092      	lsls	r2, r2, #2
 800177c:	4093      	lsls	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001784:	4937      	ldr	r1, [pc, #220]	; (8001864 <HAL_GPIO_Init+0x334>)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_GPIO_Init+0x350>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017b6:	4a32      	ldr	r2, [pc, #200]	; (8001880 <HAL_GPIO_Init+0x350>)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_GPIO_Init+0x350>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_GPIO_Init+0x350>)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_GPIO_Init+0x350>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_GPIO_Init+0x350>)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_GPIO_Init+0x350>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_GPIO_Init+0x350>)
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	f47f ae78 	bne.w	8001540 <HAL_GPIO_Init+0x10>
  }
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	371c      	adds	r7, #28
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	48000400 	.word	0x48000400
 800186c:	48000800 	.word	0x48000800
 8001870:	48000c00 	.word	0x48000c00
 8001874:	48001000 	.word	0x48001000
 8001878:	48001400 	.word	0x48001400
 800187c:	48001800 	.word	0x48001800
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018a0:	e002      	b.n	80018a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018a2:	887a      	ldrh	r2, [r7, #2]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_PWREx_GetVoltageRange+0x18>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40007000 	.word	0x40007000

080018d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018de:	d130      	bne.n	8001942 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ec:	d038      	beq.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018f6:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2232      	movs	r2, #50	; 0x32
 8001904:	fb02 f303 	mul.w	r3, r2, r3
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0c9b      	lsrs	r3, r3, #18
 8001910:	3301      	adds	r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001914:	e002      	b.n	800191c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3b01      	subs	r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001928:	d102      	bne.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x60>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f2      	bne.n	8001916 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193c:	d110      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e00f      	b.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800194a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194e:	d007      	beq.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40007000 	.word	0x40007000
 8001974:	20000000 	.word	0x20000000
 8001978:	431bde83 	.word	0x431bde83

0800197c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e3ca      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198e:	4b97      	ldr	r3, [pc, #604]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001998:	4b94      	ldr	r3, [pc, #592]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 80e4 	beq.w	8001b78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d007      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4a>
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	f040 808b 	bne.w	8001ad4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	f040 8087 	bne.w	8001ad4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c6:	4b89      	ldr	r3, [pc, #548]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x62>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e3a2      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1a      	ldr	r2, [r3, #32]
 80019e2:	4b82      	ldr	r3, [pc, #520]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_RCC_OscConfig+0x7c>
 80019ee:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f6:	e005      	b.n	8001a04 <HAL_RCC_OscConfig+0x88>
 80019f8:	4b7c      	ldr	r3, [pc, #496]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 80019fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d223      	bcs.n	8001a50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f000 fd55 	bl	80024bc <RCC_SetFlashLatencyFromMSIRange>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e383      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1c:	4b73      	ldr	r3, [pc, #460]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a72      	ldr	r2, [pc, #456]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a22:	f043 0308 	orr.w	r3, r3, #8
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b70      	ldr	r3, [pc, #448]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	496d      	ldr	r1, [pc, #436]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3a:	4b6c      	ldr	r3, [pc, #432]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	4968      	ldr	r1, [pc, #416]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
 8001a4e:	e025      	b.n	8001a9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a50:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a65      	ldr	r2, [pc, #404]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b63      	ldr	r3, [pc, #396]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4960      	ldr	r1, [pc, #384]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6e:	4b5f      	ldr	r3, [pc, #380]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	021b      	lsls	r3, r3, #8
 8001a7c:	495b      	ldr	r1, [pc, #364]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 fd15 	bl	80024bc <RCC_SetFlashLatencyFromMSIRange>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e343      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a9c:	f000 fc4a 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b52      	ldr	r3, [pc, #328]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	4950      	ldr	r1, [pc, #320]	; (8001bf0 <HAL_RCC_OscConfig+0x274>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab8:	4a4e      	ldr	r2, [pc, #312]	; (8001bf4 <HAL_RCC_OscConfig+0x278>)
 8001aba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001abc:	4b4e      	ldr	r3, [pc, #312]	; (8001bf8 <HAL_RCC_OscConfig+0x27c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f9bd 	bl	8000e40 <HAL_InitTick>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d052      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	e327      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d032      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001adc:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a42      	ldr	r2, [pc, #264]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f9fa 	bl	8000ee0 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af0:	f7ff f9f6 	bl	8000ee0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e310      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b02:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a36      	ldr	r2, [pc, #216]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4931      	ldr	r1, [pc, #196]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	492c      	ldr	r1, [pc, #176]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
 8001b40:	e01a      	b.n	8001b78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a29      	ldr	r2, [pc, #164]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f9c7 	bl	8000ee0 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b56:	f7ff f9c3 	bl	8000ee0 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e2dd      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x1da>
 8001b74:	e000      	b.n	8001b78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d074      	beq.n	8001c6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x21a>
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b0c      	cmp	r3, #12
 8001b8e:	d10e      	bne.n	8001bae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d10b      	bne.n	8001bae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d064      	beq.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d160      	bne.n	8001c6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e2ba      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x24a>
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	e026      	b.n	8001c14 <HAL_RCC_OscConfig+0x298>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bce:	d115      	bne.n	8001bfc <HAL_RCC_OscConfig+0x280>
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a05      	ldr	r2, [pc, #20]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001bd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a02      	ldr	r2, [pc, #8]	; (8001bec <HAL_RCC_OscConfig+0x270>)
 8001be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e014      	b.n	8001c14 <HAL_RCC_OscConfig+0x298>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	08005cd0 	.word	0x08005cd0
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	4ba0      	ldr	r3, [pc, #640]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a9f      	ldr	r2, [pc, #636]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b9d      	ldr	r3, [pc, #628]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a9c      	ldr	r2, [pc, #624]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f960 	bl	8000ee0 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff f95c 	bl	8000ee0 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	; 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e276      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c36:	4b92      	ldr	r3, [pc, #584]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x2a8>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff f94c 	bl	8000ee0 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff f948 	bl	8000ee0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	; 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e262      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2d0>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d060      	beq.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d005      	beq.n	8001c8c <HAL_RCC_OscConfig+0x310>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d119      	bne.n	8001cba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d116      	bne.n	8001cba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c8c:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x328>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e23f      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	061b      	lsls	r3, r3, #24
 8001cb2:	4973      	ldr	r1, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb8:	e040      	b.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d023      	beq.n	8001d0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc2:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7ff f907 	bl	8000ee0 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f903 	bl	8000ee0 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e21d      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce8:	4b65      	ldr	r3, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	495f      	ldr	r1, [pc, #380]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
 8001d08:	e018      	b.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a5c      	ldr	r2, [pc, #368]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff f8e3 	bl	8000ee0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff f8df 	bl	8000ee0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1f9      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d30:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d03c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d50:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d56:	4a4a      	ldr	r2, [pc, #296]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f8be 	bl	8000ee0 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff f8ba 	bl	8000ee0 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1d4      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0ef      	beq.n	8001d68 <HAL_RCC_OscConfig+0x3ec>
 8001d88:	e01b      	b.n	8001dc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f8a1 	bl	8000ee0 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff f89d 	bl	8000ee0 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1b7      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1ef      	bne.n	8001da2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80a6 	beq.w	8001f1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dd4:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10d      	bne.n	8001dfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6593      	str	r3, [r2, #88]	; 0x58
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x508>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d118      	bne.n	8001e3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_OscConfig+0x508>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x508>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e14:	f7ff f864 	bl	8000ee0 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1c:	f7ff f860 	bl	8000ee0 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e17a      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0x508>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d108      	bne.n	8001e54 <HAL_RCC_OscConfig+0x4d8>
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e52:	e029      	b.n	8001ea8 <HAL_RCC_OscConfig+0x52c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d115      	bne.n	8001e88 <HAL_RCC_OscConfig+0x50c>
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	4a03      	ldr	r2, [pc, #12]	; (8001e80 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7c:	e014      	b.n	8001ea8 <HAL_RCC_OscConfig+0x52c>
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
 8001e88:	4b9c      	ldr	r3, [pc, #624]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	4a9b      	ldr	r2, [pc, #620]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e98:	4b98      	ldr	r3, [pc, #608]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a97      	ldr	r2, [pc, #604]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d016      	beq.n	8001ede <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff f816 	bl	8000ee0 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f812 	bl	8000ee0 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e12a      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ed      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x53c>
 8001edc:	e015      	b.n	8001f0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7fe ffff 	bl	8000ee0 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7fe fffb 	bl	8000ee0 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e113      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001efc:	4b7f      	ldr	r3, [pc, #508]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ed      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f0a:	7ffb      	ldrb	r3, [r7, #31]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f10:	4b7a      	ldr	r3, [pc, #488]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	4a79      	ldr	r2, [pc, #484]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80fe 	beq.w	8002122 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	f040 80d0 	bne.w	80020d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f30:	4b72      	ldr	r3, [pc, #456]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d130      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d127      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11f      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f70:	2a07      	cmp	r2, #7
 8001f72:	bf14      	ite	ne
 8001f74:	2201      	movne	r2, #1
 8001f76:	2200      	moveq	r2, #0
 8001f78:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d113      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	085b      	lsrs	r3, r3, #1
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	085b      	lsrs	r3, r3, #1
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d06e      	beq.n	8002084 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b0c      	cmp	r3, #12
 8001faa:	d069      	beq.n	8002080 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fac:	4b53      	ldr	r3, [pc, #332]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d105      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0ad      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fd4:	f7fe ff84 	bl	8000ee0 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7fe ff80 	bl	8000ee0 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e09a      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fee:	4b43      	ldr	r3, [pc, #268]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ffa:	4b40      	ldr	r3, [pc, #256]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	4b40      	ldr	r3, [pc, #256]	; (8002100 <HAL_RCC_OscConfig+0x784>)
 8002000:	4013      	ands	r3, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800200a:	3a01      	subs	r2, #1
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	4311      	orrs	r1, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002014:	0212      	lsls	r2, r2, #8
 8002016:	4311      	orrs	r1, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800201c:	0852      	lsrs	r2, r2, #1
 800201e:	3a01      	subs	r2, #1
 8002020:	0552      	lsls	r2, r2, #21
 8002022:	4311      	orrs	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002028:	0852      	lsrs	r2, r2, #1
 800202a:	3a01      	subs	r2, #1
 800202c:	0652      	lsls	r2, r2, #25
 800202e:	4311      	orrs	r1, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002034:	0912      	lsrs	r2, r2, #4
 8002036:	0452      	lsls	r2, r2, #17
 8002038:	430a      	orrs	r2, r1
 800203a:	4930      	ldr	r1, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 800203c:	4313      	orrs	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002040:	4b2e      	ldr	r3, [pc, #184]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2d      	ldr	r2, [pc, #180]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8002046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a2a      	ldr	r2, [pc, #168]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002058:	f7fe ff42 	bl	8000ee0 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7fe ff3e 	bl	8000ee0 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e058      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800207e:	e050      	b.n	8002122 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e04f      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d148      	bne.n	8002122 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020a8:	f7fe ff1a 	bl	8000ee0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe ff16 	bl	8000ee0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e030      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x734>
 80020ce:	e028      	b.n	8002122 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d023      	beq.n	800211e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a08      	ldr	r2, [pc, #32]	; (80020fc <HAL_RCC_OscConfig+0x780>)
 80020dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e2:	f7fe fefd 	bl	8000ee0 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e8:	e00c      	b.n	8002104 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fef9 	bl	8000ee0 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d905      	bls.n	8002104 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e013      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
 80020fc:	40021000 	.word	0x40021000
 8002100:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_OscConfig+0x7b0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ec      	bne.n	80020ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_OscConfig+0x7b0>)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4905      	ldr	r1, [pc, #20]	; (800212c <HAL_RCC_OscConfig+0x7b0>)
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_OscConfig+0x7b4>)
 8002118:	4013      	ands	r3, r2
 800211a:	60cb      	str	r3, [r1, #12]
 800211c:	e001      	b.n	8002122 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3720      	adds	r7, #32
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	feeefffc 	.word	0xfeeefffc

08002134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0e7      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b75      	ldr	r3, [pc, #468]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d910      	bls.n	8002178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b72      	ldr	r3, [pc, #456]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 0207 	bic.w	r2, r3, #7
 800215e:	4970      	ldr	r1, [pc, #448]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b6e      	ldr	r3, [pc, #440]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0cf      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	4b66      	ldr	r3, [pc, #408]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002190:	429a      	cmp	r2, r3
 8002192:	d908      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002194:	4b63      	ldr	r3, [pc, #396]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4960      	ldr	r1, [pc, #384]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d04c      	beq.n	800224c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	4b5a      	ldr	r3, [pc, #360]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d121      	bne.n	800220a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0a6      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d107      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d2:	4b54      	ldr	r3, [pc, #336]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d115      	bne.n	800220a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e09a      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ea:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e08e      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e086      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800220a:	4b46      	ldr	r3, [pc, #280]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 0203 	bic.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4943      	ldr	r1, [pc, #268]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe fe60 	bl	8000ee0 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002222:	e00a      	b.n	800223a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002224:	f7fe fe5c 	bl	8000ee0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002232:	4293      	cmp	r3, r2
 8002234:	d901      	bls.n	800223a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e06e      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 020c 	and.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	429a      	cmp	r2, r3
 800224a:	d1eb      	bne.n	8002224 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002264:	429a      	cmp	r2, r3
 8002266:	d208      	bcs.n	800227a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	492b      	ldr	r1, [pc, #172]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d210      	bcs.n	80022aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002288:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 0207 	bic.w	r2, r3, #7
 8002290:	4923      	ldr	r1, [pc, #140]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCC_ClockConfig+0x1ec>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e036      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	4918      	ldr	r1, [pc, #96]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4910      	ldr	r1, [pc, #64]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e8:	f000 f824 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	490b      	ldr	r1, [pc, #44]	; (8002328 <HAL_RCC_ClockConfig+0x1f4>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 8002306:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCC_ClockConfig+0x1fc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fd97 	bl	8000e40 <HAL_InitTick>
 8002312:	4603      	mov	r3, r0
 8002314:	72fb      	strb	r3, [r7, #11]

  return status;
 8002316:	7afb      	ldrb	r3, [r7, #11]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40022000 	.word	0x40022000
 8002324:	40021000 	.word	0x40021000
 8002328:	08005cd0 	.word	0x08005cd0
 800232c:	20000000 	.word	0x20000000
 8002330:	20000004 	.word	0x20000004

08002334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800234c:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x34>
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d121      	bne.n	80023a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d11e      	bne.n	80023a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002368:	4b34      	ldr	r3, [pc, #208]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d107      	bne.n	8002384 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 8002376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	e005      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002390:	4a2b      	ldr	r2, [pc, #172]	; (8002440 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002398:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10d      	bne.n	80023bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d102      	bne.n	80023b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	e004      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023b8:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d134      	bne.n	800242c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d003      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0xa6>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d003      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0xac>
 80023d8:	e005      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_RCC_GetSysClockFreq+0x110>)
 80023dc:	617b      	str	r3, [r7, #20]
      break;
 80023de:	e005      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_RCC_GetSysClockFreq+0x114>)
 80023e2:	617b      	str	r3, [r7, #20]
      break;
 80023e4:	e002      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	617b      	str	r3, [r7, #20]
      break;
 80023ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023ec:	4b13      	ldr	r3, [pc, #76]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	3301      	adds	r3, #1
 80023f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	fb03 f202 	mul.w	r2, r3, r2
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_RCC_GetSysClockFreq+0x108>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	0e5b      	lsrs	r3, r3, #25
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	3301      	adds	r3, #1
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800242c:	69bb      	ldr	r3, [r7, #24]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	08005ce8 	.word	0x08005ce8
 8002444:	00f42400 	.word	0x00f42400
 8002448:	007a1200 	.word	0x007a1200

0800244c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_RCC_GetHCLKFreq+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000

08002464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002468:	f7ff fff0 	bl	800244c <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4904      	ldr	r1, [pc, #16]	; (800248c <HAL_RCC_GetPCLK1Freq+0x28>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	f003 031f 	and.w	r3, r3, #31
 8002480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	08005ce0 	.word	0x08005ce0

08002490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002494:	f7ff ffda 	bl	800244c <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0adb      	lsrs	r3, r3, #11
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4904      	ldr	r1, [pc, #16]	; (80024b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08005ce0 	.word	0x08005ce0

080024bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024d4:	f7ff f9ee 	bl	80018b4 <HAL_PWREx_GetVoltageRange>
 80024d8:	6178      	str	r0, [r7, #20]
 80024da:	e014      	b.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e0:	4a24      	ldr	r2, [pc, #144]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e6:	6593      	str	r3, [r2, #88]	; 0x58
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024f4:	f7ff f9de 	bl	80018b4 <HAL_PWREx_GetVoltageRange>
 80024f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002504:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250c:	d10b      	bne.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b80      	cmp	r3, #128	; 0x80
 8002512:	d919      	bls.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2ba0      	cmp	r3, #160	; 0xa0
 8002518:	d902      	bls.n	8002520 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800251a:	2302      	movs	r3, #2
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	e013      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002520:	2301      	movs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e010      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b80      	cmp	r3, #128	; 0x80
 800252a:	d902      	bls.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800252c:	2303      	movs	r3, #3
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	e00a      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b80      	cmp	r3, #128	; 0x80
 8002536:	d102      	bne.n	800253e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002538:	2302      	movs	r3, #2
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	e004      	b.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d101      	bne.n	8002548 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002544:	2301      	movs	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f023 0207 	bic.w	r2, r3, #7
 8002550:	4909      	ldr	r1, [pc, #36]	; (8002578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	429a      	cmp	r2, r3
 8002564:	d001      	beq.n	800256a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	40022000 	.word	0x40022000

0800257c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002584:	2300      	movs	r3, #0
 8002586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002588:	2300      	movs	r3, #0
 800258a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002594:	2b00      	cmp	r3, #0
 8002596:	d041      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800259c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025a0:	d02a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025a6:	d824      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ac:	d008      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025b2:	d81e      	bhi.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025bc:	d010      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025be:	e018      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c0:	4b86      	ldr	r3, [pc, #536]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a85      	ldr	r2, [pc, #532]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025cc:	e015      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fabb 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025de:	e00c      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3320      	adds	r3, #32
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 fba6 	bl	8002d38 <RCCEx_PLLSAI2_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025f0:	e003      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	74fb      	strb	r3, [r7, #19]
      break;
 80025f6:	e000      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fa:	7cfb      	ldrb	r3, [r7, #19]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10b      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002600:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800260e:	4973      	ldr	r1, [pc, #460]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002616:	e001      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d041      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800262c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002630:	d02a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002632:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002636:	d824      	bhi.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002638:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800263c:	d008      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800263e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002642:	d81e      	bhi.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800264c:	d010      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800264e:	e018      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002650:	4b62      	ldr	r3, [pc, #392]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a61      	ldr	r2, [pc, #388]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800265c:	e015      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3304      	adds	r3, #4
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fa73 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 800266a:	4603      	mov	r3, r0
 800266c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800266e:	e00c      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3320      	adds	r3, #32
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f000 fb5e 	bl	8002d38 <RCCEx_PLLSAI2_Config>
 800267c:	4603      	mov	r3, r0
 800267e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002680:	e003      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	74fb      	strb	r3, [r7, #19]
      break;
 8002686:	e000      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002690:	4b52      	ldr	r3, [pc, #328]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800269e:	494f      	ldr	r1, [pc, #316]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026a6:	e001      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a0 	beq.w	80027fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2300      	movs	r3, #0
 80026bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00d      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d4:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4a40      	ldr	r2, [pc, #256]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026de:	6593      	str	r3, [r2, #88]	; 0x58
 80026e0:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ec:	2301      	movs	r3, #1
 80026ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a3a      	ldr	r2, [pc, #232]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026fc:	f7fe fbf0 	bl	8000ee0 <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002702:	e009      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002704:	f7fe fbec 	bl	8000ee0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d902      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	74fb      	strb	r3, [r7, #19]
        break;
 8002716:	e005      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002718:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ef      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d15c      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002734:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01f      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	d019      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002752:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002764:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d016      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe fbab 	bl	8000ee0 <HAL_GetTick>
 800278a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278c:	e00b      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe fba7 	bl	8000ee0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d902      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	74fb      	strb	r3, [r7, #19]
            break;
 80027a4:	e006      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ec      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ca:	4904      	ldr	r1, [pc, #16]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027d2:	e009      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	74bb      	strb	r3, [r7, #18]
 80027d8:	e006      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027e8:	7c7b      	ldrb	r3, [r7, #17]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d105      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ee:	4b9e      	ldr	r3, [pc, #632]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	4a9d      	ldr	r2, [pc, #628]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002806:	4b98      	ldr	r3, [pc, #608]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f023 0203 	bic.w	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	4994      	ldr	r1, [pc, #592]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002828:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f023 020c 	bic.w	r2, r3, #12
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	498c      	ldr	r1, [pc, #560]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800284a:	4b87      	ldr	r3, [pc, #540]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	4983      	ldr	r1, [pc, #524]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800286c:	4b7e      	ldr	r3, [pc, #504]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	497b      	ldr	r1, [pc, #492]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289c:	4972      	ldr	r1, [pc, #456]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0320 	and.w	r3, r3, #32
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028b0:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	496a      	ldr	r1, [pc, #424]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028d2:	4b65      	ldr	r3, [pc, #404]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	4961      	ldr	r1, [pc, #388]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028f4:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002902:	4959      	ldr	r1, [pc, #356]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002916:	4b54      	ldr	r3, [pc, #336]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002924:	4950      	ldr	r1, [pc, #320]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	4948      	ldr	r1, [pc, #288]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800295a:	4b43      	ldr	r3, [pc, #268]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	493f      	ldr	r1, [pc, #252]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d028      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800298a:	4937      	ldr	r1, [pc, #220]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299a:	d106      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299c:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a31      	ldr	r2, [pc, #196]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a6:	60d3      	str	r3, [r2, #12]
 80029a8:	e011      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b2:	d10c      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	2101      	movs	r1, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f8c8 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 80029c0:	4603      	mov	r3, r0
 80029c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d028      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	491f      	ldr	r1, [pc, #124]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f8:	d106      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a04:	60d3      	str	r3, [r2, #12]
 8002a06:	e011      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2101      	movs	r1, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f899 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d02b      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a56:	d109      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a02      	ldr	r2, [pc, #8]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a62:	60d3      	str	r3, [r2, #12]
 8002a64:	e014      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 f867 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 8002a82:	4603      	mov	r3, r0
 8002a84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02f      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aaa:	4928      	ldr	r1, [pc, #160]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f844 	bl	8002b50 <RCCEx_PLLSAI1_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d014      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	74bb      	strb	r3, [r7, #18]
 8002ad6:	e011      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3320      	adds	r3, #32
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f925 	bl	8002d38 <RCCEx_PLLSAI2_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af2:	7cfb      	ldrb	r3, [r7, #19]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b16:	490d      	ldr	r1, [pc, #52]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b3a:	4904      	ldr	r1, [pc, #16]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b42:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000

08002b50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b5e:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d018      	beq.n	8002b9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b6a:	4b72      	ldr	r3, [pc, #456]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f003 0203 	and.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d10d      	bne.n	8002b96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b82:	4b6c      	ldr	r3, [pc, #432]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
       ||
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d047      	beq.n	8002c26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
 8002b9a:	e044      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d018      	beq.n	8002bd6 <RCCEx_PLLSAI1_Config+0x86>
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d825      	bhi.n	8002bf4 <RCCEx_PLLSAI1_Config+0xa4>
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d002      	beq.n	8002bb2 <RCCEx_PLLSAI1_Config+0x62>
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d009      	beq.n	8002bc4 <RCCEx_PLLSAI1_Config+0x74>
 8002bb0:	e020      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bb2:	4b60      	ldr	r3, [pc, #384]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d11d      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc2:	e01a      	b.n	8002bfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bc4:	4b5b      	ldr	r3, [pc, #364]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d116      	bne.n	8002bfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd4:	e013      	b.n	8002bfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bd6:	4b57      	ldr	r3, [pc, #348]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10f      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002be2:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bf2:	e006      	b.n	8002c02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf8:	e004      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e002      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c02:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10d      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c0a:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6819      	ldr	r1, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	430b      	orrs	r3, r1
 8002c20:	4944      	ldr	r1, [pc, #272]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d17d      	bne.n	8002d28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c2c:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a40      	ldr	r2, [pc, #256]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c38:	f7fe f952 	bl	8000ee0 <HAL_GetTick>
 8002c3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c3e:	e009      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c40:	f7fe f94e 	bl	8000ee0 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d902      	bls.n	8002c54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	73fb      	strb	r3, [r7, #15]
        break;
 8002c52:	e005      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ef      	bne.n	8002c40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d160      	bne.n	8002d28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d111      	bne.n	8002c90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c6c:	4b31      	ldr	r3, [pc, #196]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6892      	ldr	r2, [r2, #8]
 8002c7c:	0211      	lsls	r1, r2, #8
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68d2      	ldr	r2, [r2, #12]
 8002c82:	0912      	lsrs	r2, r2, #4
 8002c84:	0452      	lsls	r2, r2, #17
 8002c86:	430a      	orrs	r2, r1
 8002c88:	492a      	ldr	r1, [pc, #168]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	610b      	str	r3, [r1, #16]
 8002c8e:	e027      	b.n	8002ce0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d112      	bne.n	8002cbc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c96:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6892      	ldr	r2, [r2, #8]
 8002ca6:	0211      	lsls	r1, r2, #8
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6912      	ldr	r2, [r2, #16]
 8002cac:	0852      	lsrs	r2, r2, #1
 8002cae:	3a01      	subs	r2, #1
 8002cb0:	0552      	lsls	r2, r2, #21
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	491f      	ldr	r1, [pc, #124]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	610b      	str	r3, [r1, #16]
 8002cba:	e011      	b.n	8002ce0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6892      	ldr	r2, [r2, #8]
 8002ccc:	0211      	lsls	r1, r2, #8
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6952      	ldr	r2, [r2, #20]
 8002cd2:	0852      	lsrs	r2, r2, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	0652      	lsls	r2, r2, #25
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	4916      	ldr	r1, [pc, #88]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fe f8f8 	bl	8000ee0 <HAL_GetTick>
 8002cf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf2:	e009      	b.n	8002d08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf4:	f7fe f8f4 	bl	8000ee0 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d902      	bls.n	8002d08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	73fb      	strb	r3, [r7, #15]
          break;
 8002d06:	e005      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ef      	beq.n	8002cf4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	4904      	ldr	r1, [pc, #16]	; (8002d34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40021000 	.word	0x40021000

08002d38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d46:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d018      	beq.n	8002d84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d52:	4b67      	ldr	r3, [pc, #412]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0203 	and.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d10d      	bne.n	8002d7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
       ||
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d6a:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
       ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d047      	beq.n	8002e0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	e044      	b.n	8002e0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d018      	beq.n	8002dbe <RCCEx_PLLSAI2_Config+0x86>
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d825      	bhi.n	8002ddc <RCCEx_PLLSAI2_Config+0xa4>
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d002      	beq.n	8002d9a <RCCEx_PLLSAI2_Config+0x62>
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d009      	beq.n	8002dac <RCCEx_PLLSAI2_Config+0x74>
 8002d98:	e020      	b.n	8002ddc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d9a:	4b55      	ldr	r3, [pc, #340]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d11d      	bne.n	8002de2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002daa:	e01a      	b.n	8002de2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d116      	bne.n	8002de6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dbc:	e013      	b.n	8002de6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dbe:	4b4c      	ldr	r3, [pc, #304]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dda:	e006      	b.n	8002dea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      break;
 8002de0:	e004      	b.n	8002dec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002de2:	bf00      	nop
 8002de4:	e002      	b.n	8002dec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10d      	bne.n	8002e0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	430b      	orrs	r3, r1
 8002e08:	4939      	ldr	r1, [pc, #228]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d167      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e14:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a35      	ldr	r2, [pc, #212]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e20:	f7fe f85e 	bl	8000ee0 <HAL_GetTick>
 8002e24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e26:	e009      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e28:	f7fe f85a 	bl	8000ee0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d902      	bls.n	8002e3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	73fb      	strb	r3, [r7, #15]
        break;
 8002e3a:	e005      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e3c:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1ef      	bne.n	8002e28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d14a      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d111      	bne.n	8002e78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e54:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6892      	ldr	r2, [r2, #8]
 8002e64:	0211      	lsls	r1, r2, #8
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68d2      	ldr	r2, [r2, #12]
 8002e6a:	0912      	lsrs	r2, r2, #4
 8002e6c:	0452      	lsls	r2, r2, #17
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	491f      	ldr	r1, [pc, #124]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	614b      	str	r3, [r1, #20]
 8002e76:	e011      	b.n	8002e9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6892      	ldr	r2, [r2, #8]
 8002e88:	0211      	lsls	r1, r2, #8
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6912      	ldr	r2, [r2, #16]
 8002e8e:	0852      	lsrs	r2, r2, #1
 8002e90:	3a01      	subs	r2, #1
 8002e92:	0652      	lsls	r2, r2, #25
 8002e94:	430a      	orrs	r2, r1
 8002e96:	4916      	ldr	r1, [pc, #88]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe f81a 	bl	8000ee0 <HAL_GetTick>
 8002eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eae:	e009      	b.n	8002ec4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eb0:	f7fe f816 	bl	8000ee0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d902      	bls.n	8002ec4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ec2:	e005      	b.n	8002ed0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ef      	beq.n	8002eb0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d106      	bne.n	8002ee4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ed6:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e049      	b.n	8002f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d106      	bne.n	8002f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fd9c 	bl	8000a58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3304      	adds	r3, #4
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f000 fbec 	bl	8003710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d001      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e04f      	b.n	800305c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	; (8003068 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01d      	beq.n	800301a <HAL_TIM_Base_Start_IT+0x76>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe6:	d018      	beq.n	800301a <HAL_TIM_Base_Start_IT+0x76>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_TIM_Base_Start_IT+0xc8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_TIM_Base_Start_IT+0x76>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d00e      	beq.n	800301a <HAL_TIM_Base_Start_IT+0x76>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_TIM_Base_Start_IT+0xd0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d009      	beq.n	800301a <HAL_TIM_Base_Start_IT+0x76>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_TIM_Base_Start_IT+0xd4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_TIM_Base_Start_IT+0x76>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	; (800307c <HAL_TIM_Base_Start_IT+0xd8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d115      	bne.n	8003046 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_TIM_Base_Start_IT+0xdc>)
 8003022:	4013      	ands	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b06      	cmp	r3, #6
 800302a:	d015      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0xb4>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d011      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003044:	e008      	b.n	8003058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	e000      	b.n	800305a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800
 8003074:	40000c00 	.word	0x40000c00
 8003078:	40013400 	.word	0x40013400
 800307c:	40014000 	.word	0x40014000
 8003080:	00010007 	.word	0x00010007

08003084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e049      	b.n	800312a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f841 	bl	8003132 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f000 fb24 	bl	8003710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_TIM_PWM_Start+0x24>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e03c      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d109      	bne.n	8003186 <HAL_TIM_PWM_Start+0x3e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	e02f      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b08      	cmp	r3, #8
 800318a:	d109      	bne.n	80031a0 <HAL_TIM_PWM_Start+0x58>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e022      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d109      	bne.n	80031ba <HAL_TIM_PWM_Start+0x72>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e015      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d109      	bne.n	80031d4 <HAL_TIM_PWM_Start+0x8c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e008      	b.n	80031e6 <HAL_TIM_PWM_Start+0x9e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e09c      	b.n	8003328 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_TIM_PWM_Start+0xb6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fc:	e023      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d104      	bne.n	800320e <HAL_TIM_PWM_Start+0xc6>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800320c:	e01b      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Start+0xd6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321c:	e013      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d104      	bne.n	800322e <HAL_TIM_PWM_Start+0xe6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800322c:	e00b      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b10      	cmp	r3, #16
 8003232:	d104      	bne.n	800323e <HAL_TIM_PWM_Start+0xf6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800323c:	e003      	b.n	8003246 <HAL_TIM_PWM_Start+0xfe>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2201      	movs	r2, #1
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fe68 	bl	8003f24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a35      	ldr	r2, [pc, #212]	; (8003330 <HAL_TIM_PWM_Start+0x1e8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_TIM_PWM_Start+0x13e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a34      	ldr	r2, [pc, #208]	; (8003334 <HAL_TIM_PWM_Start+0x1ec>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00e      	beq.n	8003286 <HAL_TIM_PWM_Start+0x13e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a32      	ldr	r2, [pc, #200]	; (8003338 <HAL_TIM_PWM_Start+0x1f0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d009      	beq.n	8003286 <HAL_TIM_PWM_Start+0x13e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a31      	ldr	r2, [pc, #196]	; (800333c <HAL_TIM_PWM_Start+0x1f4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_TIM_PWM_Start+0x13e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2f      	ldr	r2, [pc, #188]	; (8003340 <HAL_TIM_PWM_Start+0x1f8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_TIM_PWM_Start+0x142>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <HAL_TIM_PWM_Start+0x144>
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a22      	ldr	r2, [pc, #136]	; (8003330 <HAL_TIM_PWM_Start+0x1e8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01d      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d018      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a22      	ldr	r2, [pc, #136]	; (8003344 <HAL_TIM_PWM_Start+0x1fc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a21      	ldr	r2, [pc, #132]	; (8003348 <HAL_TIM_PWM_Start+0x200>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00e      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1f      	ldr	r2, [pc, #124]	; (800334c <HAL_TIM_PWM_Start+0x204>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d009      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a17      	ldr	r2, [pc, #92]	; (8003334 <HAL_TIM_PWM_Start+0x1ec>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x19e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a15      	ldr	r2, [pc, #84]	; (8003338 <HAL_TIM_PWM_Start+0x1f0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d115      	bne.n	8003312 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_TIM_PWM_Start+0x208>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b06      	cmp	r3, #6
 80032f6:	d015      	beq.n	8003324 <HAL_TIM_PWM_Start+0x1dc>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fe:	d011      	beq.n	8003324 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003310:	e008      	b.n	8003324 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e000      	b.n	8003326 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003324:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40012c00 	.word	0x40012c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40000c00 	.word	0x40000c00
 8003350:	00010007 	.word	0x00010007

08003354 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800336e:	2302      	movs	r3, #2
 8003370:	e0ff      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b14      	cmp	r3, #20
 800337e:	f200 80f0 	bhi.w	8003562 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003382:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	080033dd 	.word	0x080033dd
 800338c:	08003563 	.word	0x08003563
 8003390:	08003563 	.word	0x08003563
 8003394:	08003563 	.word	0x08003563
 8003398:	0800341d 	.word	0x0800341d
 800339c:	08003563 	.word	0x08003563
 80033a0:	08003563 	.word	0x08003563
 80033a4:	08003563 	.word	0x08003563
 80033a8:	0800345f 	.word	0x0800345f
 80033ac:	08003563 	.word	0x08003563
 80033b0:	08003563 	.word	0x08003563
 80033b4:	08003563 	.word	0x08003563
 80033b8:	0800349f 	.word	0x0800349f
 80033bc:	08003563 	.word	0x08003563
 80033c0:	08003563 	.word	0x08003563
 80033c4:	08003563 	.word	0x08003563
 80033c8:	080034e1 	.word	0x080034e1
 80033cc:	08003563 	.word	0x08003563
 80033d0:	08003563 	.word	0x08003563
 80033d4:	08003563 	.word	0x08003563
 80033d8:	08003521 	.word	0x08003521
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fa2e 	bl	8003844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0208 	orr.w	r2, r2, #8
 80033f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0204 	bic.w	r2, r2, #4
 8003406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6999      	ldr	r1, [r3, #24]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	619a      	str	r2, [r3, #24]
      break;
 800341a:	e0a5      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fa9e 	bl	8003964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6999      	ldr	r1, [r3, #24]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	021a      	lsls	r2, r3, #8
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	619a      	str	r2, [r3, #24]
      break;
 800345c:	e084      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fb07 	bl	8003a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0208 	orr.w	r2, r2, #8
 8003478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0204 	bic.w	r2, r2, #4
 8003488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69d9      	ldr	r1, [r3, #28]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	61da      	str	r2, [r3, #28]
      break;
 800349c:	e064      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fb6f 	bl	8003b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69d9      	ldr	r1, [r3, #28]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	021a      	lsls	r2, r3, #8
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	61da      	str	r2, [r3, #28]
      break;
 80034de:	e043      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fbb8 	bl	8003c5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0208 	orr.w	r2, r2, #8
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0204 	bic.w	r2, r2, #4
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800351e:	e023      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fbfc 	bl	8003d24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800353a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	021a      	lsls	r2, r3, #8
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003560:	e002      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
      break;
 8003566:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop

0800357c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_TIM_ConfigClockSource+0x1c>
 8003594:	2302      	movs	r3, #2
 8003596:	e0b6      	b.n	8003706 <HAL_TIM_ConfigClockSource+0x18a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d4:	d03e      	beq.n	8003654 <HAL_TIM_ConfigClockSource+0xd8>
 80035d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035da:	f200 8087 	bhi.w	80036ec <HAL_TIM_ConfigClockSource+0x170>
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	f000 8086 	beq.w	80036f2 <HAL_TIM_ConfigClockSource+0x176>
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	d87f      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x170>
 80035ec:	2b70      	cmp	r3, #112	; 0x70
 80035ee:	d01a      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0xaa>
 80035f0:	2b70      	cmp	r3, #112	; 0x70
 80035f2:	d87b      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x170>
 80035f4:	2b60      	cmp	r3, #96	; 0x60
 80035f6:	d050      	beq.n	800369a <HAL_TIM_ConfigClockSource+0x11e>
 80035f8:	2b60      	cmp	r3, #96	; 0x60
 80035fa:	d877      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x170>
 80035fc:	2b50      	cmp	r3, #80	; 0x50
 80035fe:	d03c      	beq.n	800367a <HAL_TIM_ConfigClockSource+0xfe>
 8003600:	2b50      	cmp	r3, #80	; 0x50
 8003602:	d873      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x170>
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d058      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x13e>
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d86f      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x170>
 800360c:	2b30      	cmp	r3, #48	; 0x30
 800360e:	d064      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x15e>
 8003610:	2b30      	cmp	r3, #48	; 0x30
 8003612:	d86b      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x170>
 8003614:	2b20      	cmp	r3, #32
 8003616:	d060      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x15e>
 8003618:	2b20      	cmp	r3, #32
 800361a:	d867      	bhi.n	80036ec <HAL_TIM_ConfigClockSource+0x170>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d05c      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x15e>
 8003620:	2b10      	cmp	r3, #16
 8003622:	d05a      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x15e>
 8003624:	e062      	b.n	80036ec <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6899      	ldr	r1, [r3, #8]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f000 fc55 	bl	8003ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	609a      	str	r2, [r3, #8]
      break;
 8003652:	e04f      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6899      	ldr	r1, [r3, #8]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f000 fc3e 	bl	8003ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003676:	609a      	str	r2, [r3, #8]
      break;
 8003678:	e03c      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	461a      	mov	r2, r3
 8003688:	f000 fbb2 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2150      	movs	r1, #80	; 0x50
 8003692:	4618      	mov	r0, r3
 8003694:	f000 fc0b 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003698:	e02c      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f000 fbd1 	bl	8003e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2160      	movs	r1, #96	; 0x60
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fbfb 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 80036b8:	e01c      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f000 fb92 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2140      	movs	r1, #64	; 0x40
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fbeb 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 80036d8:	e00c      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4619      	mov	r1, r3
 80036e4:	4610      	mov	r0, r2
 80036e6:	f000 fbe2 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 80036ea:	e003      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      break;
 80036f0:	e000      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a40      	ldr	r2, [pc, #256]	; (8003824 <TIM_Base_SetConfig+0x114>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d013      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372e:	d00f      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3d      	ldr	r2, [pc, #244]	; (8003828 <TIM_Base_SetConfig+0x118>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00b      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a3c      	ldr	r2, [pc, #240]	; (800382c <TIM_Base_SetConfig+0x11c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d007      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3b      	ldr	r2, [pc, #236]	; (8003830 <TIM_Base_SetConfig+0x120>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d003      	beq.n	8003750 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a3a      	ldr	r2, [pc, #232]	; (8003834 <TIM_Base_SetConfig+0x124>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d108      	bne.n	8003762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <TIM_Base_SetConfig+0x114>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <TIM_Base_SetConfig+0x9a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003770:	d01b      	beq.n	80037aa <TIM_Base_SetConfig+0x9a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2c      	ldr	r2, [pc, #176]	; (8003828 <TIM_Base_SetConfig+0x118>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d017      	beq.n	80037aa <TIM_Base_SetConfig+0x9a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2b      	ldr	r2, [pc, #172]	; (800382c <TIM_Base_SetConfig+0x11c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <TIM_Base_SetConfig+0x9a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <TIM_Base_SetConfig+0x120>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00f      	beq.n	80037aa <TIM_Base_SetConfig+0x9a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a29      	ldr	r2, [pc, #164]	; (8003834 <TIM_Base_SetConfig+0x124>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00b      	beq.n	80037aa <TIM_Base_SetConfig+0x9a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a28      	ldr	r2, [pc, #160]	; (8003838 <TIM_Base_SetConfig+0x128>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <TIM_Base_SetConfig+0x9a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a27      	ldr	r2, [pc, #156]	; (800383c <TIM_Base_SetConfig+0x12c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_Base_SetConfig+0x9a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a26      	ldr	r2, [pc, #152]	; (8003840 <TIM_Base_SetConfig+0x130>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d108      	bne.n	80037bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a10      	ldr	r2, [pc, #64]	; (8003824 <TIM_Base_SetConfig+0x114>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00f      	beq.n	8003808 <TIM_Base_SetConfig+0xf8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a12      	ldr	r2, [pc, #72]	; (8003834 <TIM_Base_SetConfig+0x124>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00b      	beq.n	8003808 <TIM_Base_SetConfig+0xf8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a11      	ldr	r2, [pc, #68]	; (8003838 <TIM_Base_SetConfig+0x128>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <TIM_Base_SetConfig+0xf8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a10      	ldr	r2, [pc, #64]	; (800383c <TIM_Base_SetConfig+0x12c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0xf8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0f      	ldr	r2, [pc, #60]	; (8003840 <TIM_Base_SetConfig+0x130>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	615a      	str	r2, [r3, #20]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40013400 	.word	0x40013400
 8003838:	40014000 	.word	0x40014000
 800383c:	40014400 	.word	0x40014400
 8003840:	40014800 	.word	0x40014800

08003844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0201 	bic.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f023 0302 	bic.w	r3, r3, #2
 8003890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	4313      	orrs	r3, r2
 800389a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a2c      	ldr	r2, [pc, #176]	; (8003950 <TIM_OC1_SetConfig+0x10c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00f      	beq.n	80038c4 <TIM_OC1_SetConfig+0x80>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a2b      	ldr	r2, [pc, #172]	; (8003954 <TIM_OC1_SetConfig+0x110>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <TIM_OC1_SetConfig+0x80>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a2a      	ldr	r2, [pc, #168]	; (8003958 <TIM_OC1_SetConfig+0x114>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <TIM_OC1_SetConfig+0x80>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a29      	ldr	r2, [pc, #164]	; (800395c <TIM_OC1_SetConfig+0x118>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_OC1_SetConfig+0x80>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a28      	ldr	r2, [pc, #160]	; (8003960 <TIM_OC1_SetConfig+0x11c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d10c      	bne.n	80038de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f023 0308 	bic.w	r3, r3, #8
 80038ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f023 0304 	bic.w	r3, r3, #4
 80038dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <TIM_OC1_SetConfig+0x10c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d00f      	beq.n	8003906 <TIM_OC1_SetConfig+0xc2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a1a      	ldr	r2, [pc, #104]	; (8003954 <TIM_OC1_SetConfig+0x110>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00b      	beq.n	8003906 <TIM_OC1_SetConfig+0xc2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a19      	ldr	r2, [pc, #100]	; (8003958 <TIM_OC1_SetConfig+0x114>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <TIM_OC1_SetConfig+0xc2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a18      	ldr	r2, [pc, #96]	; (800395c <TIM_OC1_SetConfig+0x118>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d003      	beq.n	8003906 <TIM_OC1_SetConfig+0xc2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a17      	ldr	r2, [pc, #92]	; (8003960 <TIM_OC1_SetConfig+0x11c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d111      	bne.n	800392a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800390c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	621a      	str	r2, [r3, #32]
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40012c00 	.word	0x40012c00
 8003954:	40013400 	.word	0x40013400
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800

08003964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	f023 0210 	bic.w	r2, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	021b      	lsls	r3, r3, #8
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0320 	bic.w	r3, r3, #32
 80039b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <TIM_OC2_SetConfig+0x100>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d003      	beq.n	80039d0 <TIM_OC2_SetConfig+0x6c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <TIM_OC2_SetConfig+0x104>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10d      	bne.n	80039ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a1d      	ldr	r2, [pc, #116]	; (8003a64 <TIM_OC2_SetConfig+0x100>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00f      	beq.n	8003a14 <TIM_OC2_SetConfig+0xb0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <TIM_OC2_SetConfig+0x104>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <TIM_OC2_SetConfig+0xb0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <TIM_OC2_SetConfig+0x108>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d007      	beq.n	8003a14 <TIM_OC2_SetConfig+0xb0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a1a      	ldr	r2, [pc, #104]	; (8003a70 <TIM_OC2_SetConfig+0x10c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_OC2_SetConfig+0xb0>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <TIM_OC2_SetConfig+0x110>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d113      	bne.n	8003a3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40013400 	.word	0x40013400
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40014400 	.word	0x40014400
 8003a74:	40014800 	.word	0x40014800

08003a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <TIM_OC3_SetConfig+0xfc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d003      	beq.n	8003ae2 <TIM_OC3_SetConfig+0x6a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <TIM_OC3_SetConfig+0x100>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10d      	bne.n	8003afe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <TIM_OC3_SetConfig+0xfc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00f      	beq.n	8003b26 <TIM_OC3_SetConfig+0xae>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <TIM_OC3_SetConfig+0x100>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00b      	beq.n	8003b26 <TIM_OC3_SetConfig+0xae>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <TIM_OC3_SetConfig+0x104>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <TIM_OC3_SetConfig+0xae>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <TIM_OC3_SetConfig+0x108>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <TIM_OC3_SetConfig+0xae>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <TIM_OC3_SetConfig+0x10c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d113      	bne.n	8003b4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	621a      	str	r2, [r3, #32]
}
 8003b68:	bf00      	nop
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40013400 	.word	0x40013400
 8003b7c:	40014000 	.word	0x40014000
 8003b80:	40014400 	.word	0x40014400
 8003b84:	40014800 	.word	0x40014800

08003b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	031b      	lsls	r3, r3, #12
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <TIM_OC4_SetConfig+0xc0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d00f      	beq.n	8003c0c <TIM_OC4_SetConfig+0x84>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a17      	ldr	r2, [pc, #92]	; (8003c4c <TIM_OC4_SetConfig+0xc4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00b      	beq.n	8003c0c <TIM_OC4_SetConfig+0x84>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <TIM_OC4_SetConfig+0xc8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <TIM_OC4_SetConfig+0x84>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <TIM_OC4_SetConfig+0xcc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_OC4_SetConfig+0x84>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <TIM_OC4_SetConfig+0xd0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d109      	bne.n	8003c20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	019b      	lsls	r3, r3, #6
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40013400 	.word	0x40013400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a17      	ldr	r2, [pc, #92]	; (8003d10 <TIM_OC5_SetConfig+0xb4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00f      	beq.n	8003cd6 <TIM_OC5_SetConfig+0x7a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <TIM_OC5_SetConfig+0xb8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <TIM_OC5_SetConfig+0x7a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <TIM_OC5_SetConfig+0xbc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <TIM_OC5_SetConfig+0x7a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <TIM_OC5_SetConfig+0xc0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d003      	beq.n	8003cd6 <TIM_OC5_SetConfig+0x7a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <TIM_OC5_SetConfig+0xc4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d109      	bne.n	8003cea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	621a      	str	r2, [r3, #32]
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40013400 	.word	0x40013400
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	051b      	lsls	r3, r3, #20
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <TIM_OC6_SetConfig+0xb8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00f      	beq.n	8003da0 <TIM_OC6_SetConfig+0x7c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a17      	ldr	r2, [pc, #92]	; (8003de0 <TIM_OC6_SetConfig+0xbc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_OC6_SetConfig+0x7c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <TIM_OC6_SetConfig+0xc0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d007      	beq.n	8003da0 <TIM_OC6_SetConfig+0x7c>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <TIM_OC6_SetConfig+0xc4>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_OC6_SetConfig+0x7c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a14      	ldr	r2, [pc, #80]	; (8003dec <TIM_OC6_SetConfig+0xc8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d109      	bne.n	8003db4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003da6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	029b      	lsls	r3, r3, #10
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40013400 	.word	0x40013400
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800

08003df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0201 	bic.w	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 030a 	bic.w	r3, r3, #10
 8003e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f023 0210 	bic.w	r2, r3, #16
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	031b      	lsls	r3, r3, #12
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f043 0307 	orr.w	r3, r3, #7
 8003ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2201      	movs	r2, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a1a      	ldr	r2, [r3, #32]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1a      	ldr	r2, [r3, #32]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e068      	b.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a2e      	ldr	r2, [pc, #184]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2d      	ldr	r2, [pc, #180]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d108      	bne.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01d      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffa:	d018      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1b      	ldr	r2, [pc, #108]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a13      	ldr	r2, [pc, #76]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a14      	ldr	r2, [pc, #80]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10c      	bne.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4313      	orrs	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40013400 	.word	0x40013400
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	40014000 	.word	0x40014000

08004080 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004098:	2302      	movs	r3, #2
 800409a:	e065      	b.n	8004168 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a16      	ldr	r2, [pc, #88]	; (8004174 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d004      	beq.n	800412a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a14      	ldr	r2, [pc, #80]	; (8004178 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d115      	bne.n	8004156 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	051b      	lsls	r3, r3, #20
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40012c00 	.word	0x40012c00
 8004178:	40013400 	.word	0x40013400

0800417c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e040      	b.n	8004210 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fc fcec 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	; 0x24
 80041a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fbc2 	bl	8004944 <UART_SetConfig>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e022      	b.n	8004210 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fe6e 	bl	8004eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fef5 	bl	8004ff8 <UART_CheckIdleState>
 800420e:	4603      	mov	r3, r0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	; 0x28
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422c:	2b20      	cmp	r3, #32
 800422e:	f040 8082 	bne.w	8004336 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_UART_Transmit+0x26>
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e07a      	b.n	8004338 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_UART_Transmit+0x38>
 800424c:	2302      	movs	r3, #2
 800424e:	e073      	b.n	8004338 <HAL_UART_Transmit+0x120>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2221      	movs	r2, #33	; 0x21
 8004264:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004266:	f7fc fe3b 	bl	8000ee0 <HAL_GetTick>
 800426a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004284:	d108      	bne.n	8004298 <HAL_UART_Transmit+0x80>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d104      	bne.n	8004298 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	e003      	b.n	80042a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800429c:	2300      	movs	r3, #0
 800429e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80042a8:	e02d      	b.n	8004306 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2200      	movs	r2, #0
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fee8 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e039      	b.n	8004338 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	881a      	ldrh	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d6:	b292      	uxth	r2, r2
 80042d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	3302      	adds	r3, #2
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	e008      	b.n	80042f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	b292      	uxth	r2, r2
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3301      	adds	r3, #1
 80042f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1cb      	bne.n	80042aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2200      	movs	r2, #0
 800431a:	2140      	movs	r1, #64	; 0x40
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 feb4 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e005      	b.n	8004338 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	e000      	b.n	8004338 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
  }
}
 8004338:	4618      	mov	r0, r3
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b0ba      	sub	sp, #232	; 0xe8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800436a:	f640 030f 	movw	r3, #2063	; 0x80f
 800436e:	4013      	ands	r3, r2
 8004370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d115      	bne.n	80043a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00f      	beq.n	80043a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 82a6 	beq.w	80048ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
      }
      return;
 80043a6:	e2a0      	b.n	80048ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80043a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8117 	beq.w	80045e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80043b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80043c2:	4b85      	ldr	r3, [pc, #532]	; (80045d8 <HAL_UART_IRQHandler+0x298>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 810a 	beq.w	80045e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d011      	beq.n	80043fc <HAL_UART_IRQHandler+0xbc>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d011      	beq.n	800442c <HAL_UART_IRQHandler+0xec>
 8004408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2202      	movs	r2, #2
 800441a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800442c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d011      	beq.n	800445c <HAL_UART_IRQHandler+0x11c>
 8004438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2204      	movs	r2, #4
 800444a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004452:	f043 0202 	orr.w	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800445c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d017      	beq.n	8004498 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004478:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2208      	movs	r2, #8
 8004486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800448e:	f043 0208 	orr.w	r2, r3, #8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800449c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <HAL_UART_IRQHandler+0x18a>
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00c      	beq.n	80044ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c0:	f043 0220 	orr.w	r2, r3, #32
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 820c 	beq.w	80048ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d005      	beq.n	8004522 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800451a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04f      	beq.n	80045c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fe75 	bl	8005212 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	d141      	bne.n	80045ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800454c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004562:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004566:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800456e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800457a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1d9      	bne.n	8004536 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	2b00      	cmp	r3, #0
 8004588:	d013      	beq.n	80045b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a13      	ldr	r2, [pc, #76]	; (80045dc <HAL_UART_IRQHandler+0x29c>)
 8004590:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	4618      	mov	r0, r3
 8004598:	f7fc feda 	bl	8001350 <HAL_DMA_Abort_IT>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d017      	beq.n	80045d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80045ac:	4610      	mov	r0, r2
 80045ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	e00f      	b.n	80045d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9b0 	bl	8004918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	e00b      	b.n	80045d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f9ac 	bl	8004918 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	e007      	b.n	80045d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f9a8 	bl	8004918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80045d0:	e18d      	b.n	80048ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d2:	bf00      	nop
    return;
 80045d4:	e18b      	b.n	80048ee <HAL_UART_IRQHandler+0x5ae>
 80045d6:	bf00      	nop
 80045d8:	04000120 	.word	0x04000120
 80045dc:	080052d9 	.word	0x080052d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	f040 8146 	bne.w	8004876 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 813f 	beq.w	8004876 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8138 	beq.w	8004876 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2210      	movs	r2, #16
 800460c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	f040 80b4 	bne.w	8004786 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800462a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 815f 	beq.w	80048f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800463a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800463e:	429a      	cmp	r2, r3
 8004640:	f080 8157 	bcs.w	80048f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800464a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 8085 	bne.w	800476a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800467c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800468a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800468e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1da      	bne.n	8004660 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3308      	adds	r3, #8
 80046b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e1      	bne.n	80046aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800470a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800470c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e3      	bne.n	80046e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473a:	f023 0310 	bic.w	r3, r3, #16
 800473e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800474c:	65bb      	str	r3, [r7, #88]	; 0x58
 800474e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004754:	e841 2300 	strex	r3, r2, [r1]
 8004758:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800475a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e4      	bne.n	800472a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	4618      	mov	r0, r3
 8004766:	f7fc fdb5 	bl	80012d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004776:	b29b      	uxth	r3, r3
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	b29b      	uxth	r3, r3
 800477c:	4619      	mov	r1, r3
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8d4 	bl	800492c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004784:	e0b5      	b.n	80048f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004792:	b29b      	uxth	r3, r3
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80a7 	beq.w	80048f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80047a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80a2 	beq.w	80048f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047d4:	647b      	str	r3, [r7, #68]	; 0x44
 80047d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e4      	bne.n	80047b2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	623b      	str	r3, [r7, #32]
   return(result);
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3308      	adds	r3, #8
 8004808:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800480c:	633a      	str	r2, [r7, #48]	; 0x30
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e3      	bne.n	80047e8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0310 	bic.w	r3, r3, #16
 8004846:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	69b9      	ldr	r1, [r7, #24]
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	617b      	str	r3, [r7, #20]
   return(result);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e4      	bne.n	8004832 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f85c 	bl	800492c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004874:	e03f      	b.n	80048f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00e      	beq.n	80048a0 <HAL_UART_IRQHandler+0x560>
 8004882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004896:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fd5d 	bl	8005358 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800489e:	e02d      	b.n	80048fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00e      	beq.n	80048ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01c      	beq.n	80048fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4798      	blx	r3
    }
    return;
 80048c8:	e017      	b.n	80048fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d012      	beq.n	80048fc <HAL_UART_IRQHandler+0x5bc>
 80048d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00c      	beq.n	80048fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fd0e 	bl	8005304 <UART_EndTransmit_IT>
    return;
 80048e8:	e008      	b.n	80048fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80048ea:	bf00      	nop
 80048ec:	e006      	b.n	80048fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80048ee:	bf00      	nop
 80048f0:	e004      	b.n	80048fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80048f2:	bf00      	nop
 80048f4:	e002      	b.n	80048fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80048fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80048fc:	37e8      	adds	r7, #232	; 0xe8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop

08004904 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004948:	b08a      	sub	sp, #40	; 0x28
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	4313      	orrs	r3, r2
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4ba4      	ldr	r3, [pc, #656]	; (8004c04 <UART_SetConfig+0x2c0>)
 8004974:	4013      	ands	r3, r2
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800497c:	430b      	orrs	r3, r1
 800497e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a99      	ldr	r2, [pc, #612]	; (8004c08 <UART_SetConfig+0x2c4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ac:	4313      	orrs	r3, r2
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	430a      	orrs	r2, r1
 80049c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a90      	ldr	r2, [pc, #576]	; (8004c0c <UART_SetConfig+0x2c8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d126      	bne.n	8004a1c <UART_SetConfig+0xd8>
 80049ce:	4b90      	ldr	r3, [pc, #576]	; (8004c10 <UART_SetConfig+0x2cc>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d81b      	bhi.n	8004a14 <UART_SetConfig+0xd0>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <UART_SetConfig+0xa0>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	080049f5 	.word	0x080049f5
 80049e8:	08004a05 	.word	0x08004a05
 80049ec:	080049fd 	.word	0x080049fd
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e116      	b.n	8004c2a <UART_SetConfig+0x2e6>
 80049fc:	2302      	movs	r3, #2
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e112      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e10e      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e10a      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e106      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a7c      	ldr	r2, [pc, #496]	; (8004c14 <UART_SetConfig+0x2d0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d138      	bne.n	8004a98 <UART_SetConfig+0x154>
 8004a26:	4b7a      	ldr	r3, [pc, #488]	; (8004c10 <UART_SetConfig+0x2cc>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	d82d      	bhi.n	8004a90 <UART_SetConfig+0x14c>
 8004a34:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0xf8>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a91 	.word	0x08004a91
 8004a44:	08004a91 	.word	0x08004a91
 8004a48:	08004a91 	.word	0x08004a91
 8004a4c:	08004a81 	.word	0x08004a81
 8004a50:	08004a91 	.word	0x08004a91
 8004a54:	08004a91 	.word	0x08004a91
 8004a58:	08004a91 	.word	0x08004a91
 8004a5c:	08004a79 	.word	0x08004a79
 8004a60:	08004a91 	.word	0x08004a91
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a89 	.word	0x08004a89
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a76:	e0d8      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7e:	e0d4      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004a80:	2304      	movs	r3, #4
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a86:	e0d0      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004a88:	2308      	movs	r3, #8
 8004a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a8e:	e0cc      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004a90:	2310      	movs	r3, #16
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a96:	e0c8      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a5e      	ldr	r2, [pc, #376]	; (8004c18 <UART_SetConfig+0x2d4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d125      	bne.n	8004aee <UART_SetConfig+0x1aa>
 8004aa2:	4b5b      	ldr	r3, [pc, #364]	; (8004c10 <UART_SetConfig+0x2cc>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aac:	2b30      	cmp	r3, #48	; 0x30
 8004aae:	d016      	beq.n	8004ade <UART_SetConfig+0x19a>
 8004ab0:	2b30      	cmp	r3, #48	; 0x30
 8004ab2:	d818      	bhi.n	8004ae6 <UART_SetConfig+0x1a2>
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d00a      	beq.n	8004ace <UART_SetConfig+0x18a>
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d814      	bhi.n	8004ae6 <UART_SetConfig+0x1a2>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <UART_SetConfig+0x182>
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d008      	beq.n	8004ad6 <UART_SetConfig+0x192>
 8004ac4:	e00f      	b.n	8004ae6 <UART_SetConfig+0x1a2>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004acc:	e0ad      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad4:	e0a9      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004adc:	e0a5      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004ade:	2308      	movs	r3, #8
 8004ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ae4:	e0a1      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004ae6:	2310      	movs	r3, #16
 8004ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aec:	e09d      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a4a      	ldr	r2, [pc, #296]	; (8004c1c <UART_SetConfig+0x2d8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d125      	bne.n	8004b44 <UART_SetConfig+0x200>
 8004af8:	4b45      	ldr	r3, [pc, #276]	; (8004c10 <UART_SetConfig+0x2cc>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b02:	2bc0      	cmp	r3, #192	; 0xc0
 8004b04:	d016      	beq.n	8004b34 <UART_SetConfig+0x1f0>
 8004b06:	2bc0      	cmp	r3, #192	; 0xc0
 8004b08:	d818      	bhi.n	8004b3c <UART_SetConfig+0x1f8>
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d00a      	beq.n	8004b24 <UART_SetConfig+0x1e0>
 8004b0e:	2b80      	cmp	r3, #128	; 0x80
 8004b10:	d814      	bhi.n	8004b3c <UART_SetConfig+0x1f8>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <UART_SetConfig+0x1d8>
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d008      	beq.n	8004b2c <UART_SetConfig+0x1e8>
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x1f8>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b22:	e082      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004b24:	2302      	movs	r3, #2
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2a:	e07e      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b32:	e07a      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3a:	e076      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b42:	e072      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a35      	ldr	r2, [pc, #212]	; (8004c20 <UART_SetConfig+0x2dc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d12a      	bne.n	8004ba4 <UART_SetConfig+0x260>
 8004b4e:	4b30      	ldr	r3, [pc, #192]	; (8004c10 <UART_SetConfig+0x2cc>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b5c:	d01a      	beq.n	8004b94 <UART_SetConfig+0x250>
 8004b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b62:	d81b      	bhi.n	8004b9c <UART_SetConfig+0x258>
 8004b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b68:	d00c      	beq.n	8004b84 <UART_SetConfig+0x240>
 8004b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6e:	d815      	bhi.n	8004b9c <UART_SetConfig+0x258>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <UART_SetConfig+0x238>
 8004b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b78:	d008      	beq.n	8004b8c <UART_SetConfig+0x248>
 8004b7a:	e00f      	b.n	8004b9c <UART_SetConfig+0x258>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b82:	e052      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004b84:	2302      	movs	r3, #2
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e04e      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e04a      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004b94:	2308      	movs	r3, #8
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e046      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e042      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <UART_SetConfig+0x2c4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d13a      	bne.n	8004c24 <UART_SetConfig+0x2e0>
 8004bae:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <UART_SetConfig+0x2cc>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004bb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bbc:	d01a      	beq.n	8004bf4 <UART_SetConfig+0x2b0>
 8004bbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bc2:	d81b      	bhi.n	8004bfc <UART_SetConfig+0x2b8>
 8004bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc8:	d00c      	beq.n	8004be4 <UART_SetConfig+0x2a0>
 8004bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bce:	d815      	bhi.n	8004bfc <UART_SetConfig+0x2b8>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <UART_SetConfig+0x298>
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd8:	d008      	beq.n	8004bec <UART_SetConfig+0x2a8>
 8004bda:	e00f      	b.n	8004bfc <UART_SetConfig+0x2b8>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e022      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004be4:	2302      	movs	r3, #2
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e01e      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e01a      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e016      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e012      	b.n	8004c2a <UART_SetConfig+0x2e6>
 8004c04:	efff69f3 	.word	0xefff69f3
 8004c08:	40008000 	.word	0x40008000
 8004c0c:	40013800 	.word	0x40013800
 8004c10:	40021000 	.word	0x40021000
 8004c14:	40004400 	.word	0x40004400
 8004c18:	40004800 	.word	0x40004800
 8004c1c:	40004c00 	.word	0x40004c00
 8004c20:	40005000 	.word	0x40005000
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a9f      	ldr	r2, [pc, #636]	; (8004eac <UART_SetConfig+0x568>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d17a      	bne.n	8004d2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d824      	bhi.n	8004c86 <UART_SetConfig+0x342>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <UART_SetConfig+0x300>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c87 	.word	0x08004c87
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c87 	.word	0x08004c87
 8004c54:	08004c77 	.word	0x08004c77
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c87 	.word	0x08004c87
 8004c60:	08004c87 	.word	0x08004c87
 8004c64:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c68:	f7fd fbfc 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8004c6c:	61f8      	str	r0, [r7, #28]
        break;
 8004c6e:	e010      	b.n	8004c92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b8f      	ldr	r3, [pc, #572]	; (8004eb0 <UART_SetConfig+0x56c>)
 8004c72:	61fb      	str	r3, [r7, #28]
        break;
 8004c74:	e00d      	b.n	8004c92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fd fb5d 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8004c7a:	61f8      	str	r0, [r7, #28]
        break;
 8004c7c:	e009      	b.n	8004c92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	61fb      	str	r3, [r7, #28]
        break;
 8004c84:	e005      	b.n	8004c92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80fb 	beq.w	8004e90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d305      	bcc.n	8004cb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d903      	bls.n	8004cbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004cbc:	e0e8      	b.n	8004e90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	461c      	mov	r4, r3
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	022b      	lsls	r3, r5, #8
 8004cd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cd4:	0222      	lsls	r2, r4, #8
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	6849      	ldr	r1, [r1, #4]
 8004cda:	0849      	lsrs	r1, r1, #1
 8004cdc:	2000      	movs	r0, #0
 8004cde:	4688      	mov	r8, r1
 8004ce0:	4681      	mov	r9, r0
 8004ce2:	eb12 0a08 	adds.w	sl, r2, r8
 8004ce6:	eb43 0b09 	adc.w	fp, r3, r9
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cf8:	4650      	mov	r0, sl
 8004cfa:	4659      	mov	r1, fp
 8004cfc:	f7fb fab8 	bl	8000270 <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4613      	mov	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d0e:	d308      	bcc.n	8004d22 <UART_SetConfig+0x3de>
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d16:	d204      	bcs.n	8004d22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	60da      	str	r2, [r3, #12]
 8004d20:	e0b6      	b.n	8004e90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d28:	e0b2      	b.n	8004e90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d32:	d15e      	bne.n	8004df2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d828      	bhi.n	8004d8e <UART_SetConfig+0x44a>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0x400>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d69 	.word	0x08004d69
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	08004d79 	.word	0x08004d79
 8004d50:	08004d8f 	.word	0x08004d8f
 8004d54:	08004d7f 	.word	0x08004d7f
 8004d58:	08004d8f 	.word	0x08004d8f
 8004d5c:	08004d8f 	.word	0x08004d8f
 8004d60:	08004d8f 	.word	0x08004d8f
 8004d64:	08004d87 	.word	0x08004d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d68:	f7fd fb7c 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8004d6c:	61f8      	str	r0, [r7, #28]
        break;
 8004d6e:	e014      	b.n	8004d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d70:	f7fd fb8e 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 8004d74:	61f8      	str	r0, [r7, #28]
        break;
 8004d76:	e010      	b.n	8004d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d78:	4b4d      	ldr	r3, [pc, #308]	; (8004eb0 <UART_SetConfig+0x56c>)
 8004d7a:	61fb      	str	r3, [r7, #28]
        break;
 8004d7c:	e00d      	b.n	8004d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7e:	f7fd fad9 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8004d82:	61f8      	str	r0, [r7, #28]
        break;
 8004d84:	e009      	b.n	8004d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8a:	61fb      	str	r3, [r7, #28]
        break;
 8004d8c:	e005      	b.n	8004d9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d077      	beq.n	8004e90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005a      	lsls	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	441a      	add	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b0f      	cmp	r3, #15
 8004dba:	d916      	bls.n	8004dea <UART_SetConfig+0x4a6>
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc2:	d212      	bcs.n	8004dea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f023 030f 	bic.w	r3, r3, #15
 8004dcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	8afb      	ldrh	r3, [r7, #22]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	8afa      	ldrh	r2, [r7, #22]
 8004de6:	60da      	str	r2, [r3, #12]
 8004de8:	e052      	b.n	8004e90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004df0:	e04e      	b.n	8004e90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d827      	bhi.n	8004e4a <UART_SetConfig+0x506>
 8004dfa:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x4bc>)
 8004dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e2d 	.word	0x08004e2d
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e3b 	.word	0x08004e3b
 8004e14:	08004e4b 	.word	0x08004e4b
 8004e18:	08004e4b 	.word	0x08004e4b
 8004e1c:	08004e4b 	.word	0x08004e4b
 8004e20:	08004e43 	.word	0x08004e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7fd fb1e 	bl	8002464 <HAL_RCC_GetPCLK1Freq>
 8004e28:	61f8      	str	r0, [r7, #28]
        break;
 8004e2a:	e014      	b.n	8004e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fd fb30 	bl	8002490 <HAL_RCC_GetPCLK2Freq>
 8004e30:	61f8      	str	r0, [r7, #28]
        break;
 8004e32:	e010      	b.n	8004e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e34:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <UART_SetConfig+0x56c>)
 8004e36:	61fb      	str	r3, [r7, #28]
        break;
 8004e38:	e00d      	b.n	8004e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3a:	f7fd fa7b 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8004e3e:	61f8      	str	r0, [r7, #28]
        break;
 8004e40:	e009      	b.n	8004e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	61fb      	str	r3, [r7, #28]
        break;
 8004e48:	e005      	b.n	8004e56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e54:	bf00      	nop
    }

    if (pclk != 0U)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d019      	beq.n	8004e90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	085a      	lsrs	r2, r3, #1
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	441a      	add	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b0f      	cmp	r3, #15
 8004e74:	d909      	bls.n	8004e8a <UART_SetConfig+0x546>
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7c:	d205      	bcs.n	8004e8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60da      	str	r2, [r3, #12]
 8004e88:	e002      	b.n	8004e90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3728      	adds	r7, #40	; 0x28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eaa:	bf00      	nop
 8004eac:	40008000 	.word	0x40008000
 8004eb0:	00f42400 	.word	0x00f42400

08004eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01a      	beq.n	8004fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb2:	d10a      	bne.n	8004fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]
  }
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005008:	f7fb ff6a 	bl	8000ee0 <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b08      	cmp	r3, #8
 800501a:	d10e      	bne.n	800503a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f82d 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e023      	b.n	8005082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d10e      	bne.n	8005066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f817 	bl	800508a <UART_WaitOnFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e00d      	b.n	8005082 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b09c      	sub	sp, #112	; 0x70
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	603b      	str	r3, [r7, #0]
 8005096:	4613      	mov	r3, r2
 8005098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509a:	e0a5      	b.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	f000 80a1 	beq.w	80051e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a6:	f7fb ff1b 	bl	8000ee0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d302      	bcc.n	80050bc <UART_WaitOnFlagUntilTimeout+0x32>
 80050b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d13e      	bne.n	800513a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050d0:	667b      	str	r3, [r7, #100]	; 0x64
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e6      	bne.n	80050bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3308      	adds	r3, #8
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	663b      	str	r3, [r7, #96]	; 0x60
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3308      	adds	r3, #8
 800510c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800510e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005110:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800511c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e5      	bne.n	80050ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e067      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d04f      	beq.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005156:	d147      	bne.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005160:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
 8005182:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e6      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	613b      	str	r3, [r7, #16]
   return(result);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3308      	adds	r3, #8
 80051b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051b4:	623a      	str	r2, [r7, #32]
 80051b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	69f9      	ldr	r1, [r7, #28]
 80051ba:	6a3a      	ldr	r2, [r7, #32]
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e5      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e010      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69da      	ldr	r2, [r3, #28]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	4013      	ands	r3, r2
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	429a      	cmp	r2, r3
 8005204:	f43f af4a 	beq.w	800509c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3770      	adds	r7, #112	; 0x70
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005212:	b480      	push	{r7}
 8005214:	b095      	sub	sp, #84	; 0x54
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800522e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005238:	643b      	str	r3, [r7, #64]	; 0x40
 800523a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800523e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e6      	bne.n	800521a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	3308      	adds	r3, #8
 8005252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	e853 3f00 	ldrex	r3, [r3]
 800525a:	61fb      	str	r3, [r7, #28]
   return(result);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f023 0301 	bic.w	r3, r3, #1
 8005262:	64bb      	str	r3, [r7, #72]	; 0x48
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3308      	adds	r3, #8
 800526a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800526c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e5      	bne.n	800524c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005284:	2b01      	cmp	r3, #1
 8005286:	d118      	bne.n	80052ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	60bb      	str	r3, [r7, #8]
   return(result);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f023 0310 	bic.w	r3, r3, #16
 800529c:	647b      	str	r3, [r7, #68]	; 0x44
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6979      	ldr	r1, [r7, #20]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	613b      	str	r3, [r7, #16]
   return(result);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e6      	bne.n	8005288 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	665a      	str	r2, [r3, #100]	; 0x64
}
 80052cc:	bf00      	nop
 80052ce:	3754      	adds	r7, #84	; 0x54
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff fb0e 	bl	8004918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	60bb      	str	r3, [r7, #8]
   return(result);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6979      	ldr	r1, [r7, #20]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	613b      	str	r3, [r7, #16]
   return(result);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e6      	bne.n	800530c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fada 	bl	8004904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005350:	bf00      	nop
 8005352:	3720      	adds	r7, #32
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <__errno>:
 800536c:	4b01      	ldr	r3, [pc, #4]	; (8005374 <__errno+0x8>)
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	2000000c 	.word	0x2000000c

08005378 <__libc_init_array>:
 8005378:	b570      	push	{r4, r5, r6, lr}
 800537a:	4d0d      	ldr	r5, [pc, #52]	; (80053b0 <__libc_init_array+0x38>)
 800537c:	4c0d      	ldr	r4, [pc, #52]	; (80053b4 <__libc_init_array+0x3c>)
 800537e:	1b64      	subs	r4, r4, r5
 8005380:	10a4      	asrs	r4, r4, #2
 8005382:	2600      	movs	r6, #0
 8005384:	42a6      	cmp	r6, r4
 8005386:	d109      	bne.n	800539c <__libc_init_array+0x24>
 8005388:	4d0b      	ldr	r5, [pc, #44]	; (80053b8 <__libc_init_array+0x40>)
 800538a:	4c0c      	ldr	r4, [pc, #48]	; (80053bc <__libc_init_array+0x44>)
 800538c:	f000 fc8e 	bl	8005cac <_init>
 8005390:	1b64      	subs	r4, r4, r5
 8005392:	10a4      	asrs	r4, r4, #2
 8005394:	2600      	movs	r6, #0
 8005396:	42a6      	cmp	r6, r4
 8005398:	d105      	bne.n	80053a6 <__libc_init_array+0x2e>
 800539a:	bd70      	pop	{r4, r5, r6, pc}
 800539c:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a0:	4798      	blx	r3
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7ee      	b.n	8005384 <__libc_init_array+0xc>
 80053a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053aa:	4798      	blx	r3
 80053ac:	3601      	adds	r6, #1
 80053ae:	e7f2      	b.n	8005396 <__libc_init_array+0x1e>
 80053b0:	08005d54 	.word	0x08005d54
 80053b4:	08005d54 	.word	0x08005d54
 80053b8:	08005d54 	.word	0x08005d54
 80053bc:	08005d58 	.word	0x08005d58

080053c0 <memset>:
 80053c0:	4402      	add	r2, r0
 80053c2:	4603      	mov	r3, r0
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d100      	bne.n	80053ca <memset+0xa>
 80053c8:	4770      	bx	lr
 80053ca:	f803 1b01 	strb.w	r1, [r3], #1
 80053ce:	e7f9      	b.n	80053c4 <memset+0x4>

080053d0 <siprintf>:
 80053d0:	b40e      	push	{r1, r2, r3}
 80053d2:	b500      	push	{lr}
 80053d4:	b09c      	sub	sp, #112	; 0x70
 80053d6:	ab1d      	add	r3, sp, #116	; 0x74
 80053d8:	9002      	str	r0, [sp, #8]
 80053da:	9006      	str	r0, [sp, #24]
 80053dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053e0:	4809      	ldr	r0, [pc, #36]	; (8005408 <siprintf+0x38>)
 80053e2:	9107      	str	r1, [sp, #28]
 80053e4:	9104      	str	r1, [sp, #16]
 80053e6:	4909      	ldr	r1, [pc, #36]	; (800540c <siprintf+0x3c>)
 80053e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ec:	9105      	str	r1, [sp, #20]
 80053ee:	6800      	ldr	r0, [r0, #0]
 80053f0:	9301      	str	r3, [sp, #4]
 80053f2:	a902      	add	r1, sp, #8
 80053f4:	f000 f868 	bl	80054c8 <_svfiprintf_r>
 80053f8:	9b02      	ldr	r3, [sp, #8]
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	b01c      	add	sp, #112	; 0x70
 8005400:	f85d eb04 	ldr.w	lr, [sp], #4
 8005404:	b003      	add	sp, #12
 8005406:	4770      	bx	lr
 8005408:	2000000c 	.word	0x2000000c
 800540c:	ffff0208 	.word	0xffff0208

08005410 <__ssputs_r>:
 8005410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005414:	688e      	ldr	r6, [r1, #8]
 8005416:	429e      	cmp	r6, r3
 8005418:	4682      	mov	sl, r0
 800541a:	460c      	mov	r4, r1
 800541c:	4690      	mov	r8, r2
 800541e:	461f      	mov	r7, r3
 8005420:	d838      	bhi.n	8005494 <__ssputs_r+0x84>
 8005422:	898a      	ldrh	r2, [r1, #12]
 8005424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005428:	d032      	beq.n	8005490 <__ssputs_r+0x80>
 800542a:	6825      	ldr	r5, [r4, #0]
 800542c:	6909      	ldr	r1, [r1, #16]
 800542e:	eba5 0901 	sub.w	r9, r5, r1
 8005432:	6965      	ldr	r5, [r4, #20]
 8005434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800543c:	3301      	adds	r3, #1
 800543e:	444b      	add	r3, r9
 8005440:	106d      	asrs	r5, r5, #1
 8005442:	429d      	cmp	r5, r3
 8005444:	bf38      	it	cc
 8005446:	461d      	movcc	r5, r3
 8005448:	0553      	lsls	r3, r2, #21
 800544a:	d531      	bpl.n	80054b0 <__ssputs_r+0xa0>
 800544c:	4629      	mov	r1, r5
 800544e:	f000 fb63 	bl	8005b18 <_malloc_r>
 8005452:	4606      	mov	r6, r0
 8005454:	b950      	cbnz	r0, 800546c <__ssputs_r+0x5c>
 8005456:	230c      	movs	r3, #12
 8005458:	f8ca 3000 	str.w	r3, [sl]
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	f04f 30ff 	mov.w	r0, #4294967295
 8005468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800546c:	6921      	ldr	r1, [r4, #16]
 800546e:	464a      	mov	r2, r9
 8005470:	f000 fabe 	bl	80059f0 <memcpy>
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800547a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547e:	81a3      	strh	r3, [r4, #12]
 8005480:	6126      	str	r6, [r4, #16]
 8005482:	6165      	str	r5, [r4, #20]
 8005484:	444e      	add	r6, r9
 8005486:	eba5 0509 	sub.w	r5, r5, r9
 800548a:	6026      	str	r6, [r4, #0]
 800548c:	60a5      	str	r5, [r4, #8]
 800548e:	463e      	mov	r6, r7
 8005490:	42be      	cmp	r6, r7
 8005492:	d900      	bls.n	8005496 <__ssputs_r+0x86>
 8005494:	463e      	mov	r6, r7
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	4632      	mov	r2, r6
 800549a:	4641      	mov	r1, r8
 800549c:	f000 fab6 	bl	8005a0c <memmove>
 80054a0:	68a3      	ldr	r3, [r4, #8]
 80054a2:	1b9b      	subs	r3, r3, r6
 80054a4:	60a3      	str	r3, [r4, #8]
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	4433      	add	r3, r6
 80054aa:	6023      	str	r3, [r4, #0]
 80054ac:	2000      	movs	r0, #0
 80054ae:	e7db      	b.n	8005468 <__ssputs_r+0x58>
 80054b0:	462a      	mov	r2, r5
 80054b2:	f000 fba5 	bl	8005c00 <_realloc_r>
 80054b6:	4606      	mov	r6, r0
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d1e1      	bne.n	8005480 <__ssputs_r+0x70>
 80054bc:	6921      	ldr	r1, [r4, #16]
 80054be:	4650      	mov	r0, sl
 80054c0:	f000 fabe 	bl	8005a40 <_free_r>
 80054c4:	e7c7      	b.n	8005456 <__ssputs_r+0x46>
	...

080054c8 <_svfiprintf_r>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	4698      	mov	r8, r3
 80054ce:	898b      	ldrh	r3, [r1, #12]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	b09d      	sub	sp, #116	; 0x74
 80054d4:	4607      	mov	r7, r0
 80054d6:	460d      	mov	r5, r1
 80054d8:	4614      	mov	r4, r2
 80054da:	d50e      	bpl.n	80054fa <_svfiprintf_r+0x32>
 80054dc:	690b      	ldr	r3, [r1, #16]
 80054de:	b963      	cbnz	r3, 80054fa <_svfiprintf_r+0x32>
 80054e0:	2140      	movs	r1, #64	; 0x40
 80054e2:	f000 fb19 	bl	8005b18 <_malloc_r>
 80054e6:	6028      	str	r0, [r5, #0]
 80054e8:	6128      	str	r0, [r5, #16]
 80054ea:	b920      	cbnz	r0, 80054f6 <_svfiprintf_r+0x2e>
 80054ec:	230c      	movs	r3, #12
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295
 80054f4:	e0d1      	b.n	800569a <_svfiprintf_r+0x1d2>
 80054f6:	2340      	movs	r3, #64	; 0x40
 80054f8:	616b      	str	r3, [r5, #20]
 80054fa:	2300      	movs	r3, #0
 80054fc:	9309      	str	r3, [sp, #36]	; 0x24
 80054fe:	2320      	movs	r3, #32
 8005500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005504:	f8cd 800c 	str.w	r8, [sp, #12]
 8005508:	2330      	movs	r3, #48	; 0x30
 800550a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80056b4 <_svfiprintf_r+0x1ec>
 800550e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005512:	f04f 0901 	mov.w	r9, #1
 8005516:	4623      	mov	r3, r4
 8005518:	469a      	mov	sl, r3
 800551a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800551e:	b10a      	cbz	r2, 8005524 <_svfiprintf_r+0x5c>
 8005520:	2a25      	cmp	r2, #37	; 0x25
 8005522:	d1f9      	bne.n	8005518 <_svfiprintf_r+0x50>
 8005524:	ebba 0b04 	subs.w	fp, sl, r4
 8005528:	d00b      	beq.n	8005542 <_svfiprintf_r+0x7a>
 800552a:	465b      	mov	r3, fp
 800552c:	4622      	mov	r2, r4
 800552e:	4629      	mov	r1, r5
 8005530:	4638      	mov	r0, r7
 8005532:	f7ff ff6d 	bl	8005410 <__ssputs_r>
 8005536:	3001      	adds	r0, #1
 8005538:	f000 80aa 	beq.w	8005690 <_svfiprintf_r+0x1c8>
 800553c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800553e:	445a      	add	r2, fp
 8005540:	9209      	str	r2, [sp, #36]	; 0x24
 8005542:	f89a 3000 	ldrb.w	r3, [sl]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80a2 	beq.w	8005690 <_svfiprintf_r+0x1c8>
 800554c:	2300      	movs	r3, #0
 800554e:	f04f 32ff 	mov.w	r2, #4294967295
 8005552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005556:	f10a 0a01 	add.w	sl, sl, #1
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	9307      	str	r3, [sp, #28]
 800555e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005562:	931a      	str	r3, [sp, #104]	; 0x68
 8005564:	4654      	mov	r4, sl
 8005566:	2205      	movs	r2, #5
 8005568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800556c:	4851      	ldr	r0, [pc, #324]	; (80056b4 <_svfiprintf_r+0x1ec>)
 800556e:	f7fa fe2f 	bl	80001d0 <memchr>
 8005572:	9a04      	ldr	r2, [sp, #16]
 8005574:	b9d8      	cbnz	r0, 80055ae <_svfiprintf_r+0xe6>
 8005576:	06d0      	lsls	r0, r2, #27
 8005578:	bf44      	itt	mi
 800557a:	2320      	movmi	r3, #32
 800557c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005580:	0711      	lsls	r1, r2, #28
 8005582:	bf44      	itt	mi
 8005584:	232b      	movmi	r3, #43	; 0x2b
 8005586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800558a:	f89a 3000 	ldrb.w	r3, [sl]
 800558e:	2b2a      	cmp	r3, #42	; 0x2a
 8005590:	d015      	beq.n	80055be <_svfiprintf_r+0xf6>
 8005592:	9a07      	ldr	r2, [sp, #28]
 8005594:	4654      	mov	r4, sl
 8005596:	2000      	movs	r0, #0
 8005598:	f04f 0c0a 	mov.w	ip, #10
 800559c:	4621      	mov	r1, r4
 800559e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055a2:	3b30      	subs	r3, #48	; 0x30
 80055a4:	2b09      	cmp	r3, #9
 80055a6:	d94e      	bls.n	8005646 <_svfiprintf_r+0x17e>
 80055a8:	b1b0      	cbz	r0, 80055d8 <_svfiprintf_r+0x110>
 80055aa:	9207      	str	r2, [sp, #28]
 80055ac:	e014      	b.n	80055d8 <_svfiprintf_r+0x110>
 80055ae:	eba0 0308 	sub.w	r3, r0, r8
 80055b2:	fa09 f303 	lsl.w	r3, r9, r3
 80055b6:	4313      	orrs	r3, r2
 80055b8:	9304      	str	r3, [sp, #16]
 80055ba:	46a2      	mov	sl, r4
 80055bc:	e7d2      	b.n	8005564 <_svfiprintf_r+0x9c>
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	1d19      	adds	r1, r3, #4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	9103      	str	r1, [sp, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bfbb      	ittet	lt
 80055ca:	425b      	neglt	r3, r3
 80055cc:	f042 0202 	orrlt.w	r2, r2, #2
 80055d0:	9307      	strge	r3, [sp, #28]
 80055d2:	9307      	strlt	r3, [sp, #28]
 80055d4:	bfb8      	it	lt
 80055d6:	9204      	strlt	r2, [sp, #16]
 80055d8:	7823      	ldrb	r3, [r4, #0]
 80055da:	2b2e      	cmp	r3, #46	; 0x2e
 80055dc:	d10c      	bne.n	80055f8 <_svfiprintf_r+0x130>
 80055de:	7863      	ldrb	r3, [r4, #1]
 80055e0:	2b2a      	cmp	r3, #42	; 0x2a
 80055e2:	d135      	bne.n	8005650 <_svfiprintf_r+0x188>
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	1d1a      	adds	r2, r3, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	9203      	str	r2, [sp, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	bfb8      	it	lt
 80055f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80055f4:	3402      	adds	r4, #2
 80055f6:	9305      	str	r3, [sp, #20]
 80055f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80056c4 <_svfiprintf_r+0x1fc>
 80055fc:	7821      	ldrb	r1, [r4, #0]
 80055fe:	2203      	movs	r2, #3
 8005600:	4650      	mov	r0, sl
 8005602:	f7fa fde5 	bl	80001d0 <memchr>
 8005606:	b140      	cbz	r0, 800561a <_svfiprintf_r+0x152>
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	eba0 000a 	sub.w	r0, r0, sl
 800560e:	fa03 f000 	lsl.w	r0, r3, r0
 8005612:	9b04      	ldr	r3, [sp, #16]
 8005614:	4303      	orrs	r3, r0
 8005616:	3401      	adds	r4, #1
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561e:	4826      	ldr	r0, [pc, #152]	; (80056b8 <_svfiprintf_r+0x1f0>)
 8005620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005624:	2206      	movs	r2, #6
 8005626:	f7fa fdd3 	bl	80001d0 <memchr>
 800562a:	2800      	cmp	r0, #0
 800562c:	d038      	beq.n	80056a0 <_svfiprintf_r+0x1d8>
 800562e:	4b23      	ldr	r3, [pc, #140]	; (80056bc <_svfiprintf_r+0x1f4>)
 8005630:	bb1b      	cbnz	r3, 800567a <_svfiprintf_r+0x1b2>
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	3307      	adds	r3, #7
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	3308      	adds	r3, #8
 800563c:	9303      	str	r3, [sp, #12]
 800563e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005640:	4433      	add	r3, r6
 8005642:	9309      	str	r3, [sp, #36]	; 0x24
 8005644:	e767      	b.n	8005516 <_svfiprintf_r+0x4e>
 8005646:	fb0c 3202 	mla	r2, ip, r2, r3
 800564a:	460c      	mov	r4, r1
 800564c:	2001      	movs	r0, #1
 800564e:	e7a5      	b.n	800559c <_svfiprintf_r+0xd4>
 8005650:	2300      	movs	r3, #0
 8005652:	3401      	adds	r4, #1
 8005654:	9305      	str	r3, [sp, #20]
 8005656:	4619      	mov	r1, r3
 8005658:	f04f 0c0a 	mov.w	ip, #10
 800565c:	4620      	mov	r0, r4
 800565e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005662:	3a30      	subs	r2, #48	; 0x30
 8005664:	2a09      	cmp	r2, #9
 8005666:	d903      	bls.n	8005670 <_svfiprintf_r+0x1a8>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0c5      	beq.n	80055f8 <_svfiprintf_r+0x130>
 800566c:	9105      	str	r1, [sp, #20]
 800566e:	e7c3      	b.n	80055f8 <_svfiprintf_r+0x130>
 8005670:	fb0c 2101 	mla	r1, ip, r1, r2
 8005674:	4604      	mov	r4, r0
 8005676:	2301      	movs	r3, #1
 8005678:	e7f0      	b.n	800565c <_svfiprintf_r+0x194>
 800567a:	ab03      	add	r3, sp, #12
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	462a      	mov	r2, r5
 8005680:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <_svfiprintf_r+0x1f8>)
 8005682:	a904      	add	r1, sp, #16
 8005684:	4638      	mov	r0, r7
 8005686:	f3af 8000 	nop.w
 800568a:	1c42      	adds	r2, r0, #1
 800568c:	4606      	mov	r6, r0
 800568e:	d1d6      	bne.n	800563e <_svfiprintf_r+0x176>
 8005690:	89ab      	ldrh	r3, [r5, #12]
 8005692:	065b      	lsls	r3, r3, #25
 8005694:	f53f af2c 	bmi.w	80054f0 <_svfiprintf_r+0x28>
 8005698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800569a:	b01d      	add	sp, #116	; 0x74
 800569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a0:	ab03      	add	r3, sp, #12
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	462a      	mov	r2, r5
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <_svfiprintf_r+0x1f8>)
 80056a8:	a904      	add	r1, sp, #16
 80056aa:	4638      	mov	r0, r7
 80056ac:	f000 f87a 	bl	80057a4 <_printf_i>
 80056b0:	e7eb      	b.n	800568a <_svfiprintf_r+0x1c2>
 80056b2:	bf00      	nop
 80056b4:	08005d18 	.word	0x08005d18
 80056b8:	08005d22 	.word	0x08005d22
 80056bc:	00000000 	.word	0x00000000
 80056c0:	08005411 	.word	0x08005411
 80056c4:	08005d1e 	.word	0x08005d1e

080056c8 <_printf_common>:
 80056c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056cc:	4616      	mov	r6, r2
 80056ce:	4699      	mov	r9, r3
 80056d0:	688a      	ldr	r2, [r1, #8]
 80056d2:	690b      	ldr	r3, [r1, #16]
 80056d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056d8:	4293      	cmp	r3, r2
 80056da:	bfb8      	it	lt
 80056dc:	4613      	movlt	r3, r2
 80056de:	6033      	str	r3, [r6, #0]
 80056e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056e4:	4607      	mov	r7, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	b10a      	cbz	r2, 80056ee <_printf_common+0x26>
 80056ea:	3301      	adds	r3, #1
 80056ec:	6033      	str	r3, [r6, #0]
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	0699      	lsls	r1, r3, #26
 80056f2:	bf42      	ittt	mi
 80056f4:	6833      	ldrmi	r3, [r6, #0]
 80056f6:	3302      	addmi	r3, #2
 80056f8:	6033      	strmi	r3, [r6, #0]
 80056fa:	6825      	ldr	r5, [r4, #0]
 80056fc:	f015 0506 	ands.w	r5, r5, #6
 8005700:	d106      	bne.n	8005710 <_printf_common+0x48>
 8005702:	f104 0a19 	add.w	sl, r4, #25
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	6832      	ldr	r2, [r6, #0]
 800570a:	1a9b      	subs	r3, r3, r2
 800570c:	42ab      	cmp	r3, r5
 800570e:	dc26      	bgt.n	800575e <_printf_common+0x96>
 8005710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005714:	1e13      	subs	r3, r2, #0
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	bf18      	it	ne
 800571a:	2301      	movne	r3, #1
 800571c:	0692      	lsls	r2, r2, #26
 800571e:	d42b      	bmi.n	8005778 <_printf_common+0xb0>
 8005720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005724:	4649      	mov	r1, r9
 8005726:	4638      	mov	r0, r7
 8005728:	47c0      	blx	r8
 800572a:	3001      	adds	r0, #1
 800572c:	d01e      	beq.n	800576c <_printf_common+0xa4>
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	68e5      	ldr	r5, [r4, #12]
 8005732:	6832      	ldr	r2, [r6, #0]
 8005734:	f003 0306 	and.w	r3, r3, #6
 8005738:	2b04      	cmp	r3, #4
 800573a:	bf08      	it	eq
 800573c:	1aad      	subeq	r5, r5, r2
 800573e:	68a3      	ldr	r3, [r4, #8]
 8005740:	6922      	ldr	r2, [r4, #16]
 8005742:	bf0c      	ite	eq
 8005744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005748:	2500      	movne	r5, #0
 800574a:	4293      	cmp	r3, r2
 800574c:	bfc4      	itt	gt
 800574e:	1a9b      	subgt	r3, r3, r2
 8005750:	18ed      	addgt	r5, r5, r3
 8005752:	2600      	movs	r6, #0
 8005754:	341a      	adds	r4, #26
 8005756:	42b5      	cmp	r5, r6
 8005758:	d11a      	bne.n	8005790 <_printf_common+0xc8>
 800575a:	2000      	movs	r0, #0
 800575c:	e008      	b.n	8005770 <_printf_common+0xa8>
 800575e:	2301      	movs	r3, #1
 8005760:	4652      	mov	r2, sl
 8005762:	4649      	mov	r1, r9
 8005764:	4638      	mov	r0, r7
 8005766:	47c0      	blx	r8
 8005768:	3001      	adds	r0, #1
 800576a:	d103      	bne.n	8005774 <_printf_common+0xac>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	3501      	adds	r5, #1
 8005776:	e7c6      	b.n	8005706 <_printf_common+0x3e>
 8005778:	18e1      	adds	r1, r4, r3
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	2030      	movs	r0, #48	; 0x30
 800577e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005782:	4422      	add	r2, r4
 8005784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800578c:	3302      	adds	r3, #2
 800578e:	e7c7      	b.n	8005720 <_printf_common+0x58>
 8005790:	2301      	movs	r3, #1
 8005792:	4622      	mov	r2, r4
 8005794:	4649      	mov	r1, r9
 8005796:	4638      	mov	r0, r7
 8005798:	47c0      	blx	r8
 800579a:	3001      	adds	r0, #1
 800579c:	d0e6      	beq.n	800576c <_printf_common+0xa4>
 800579e:	3601      	adds	r6, #1
 80057a0:	e7d9      	b.n	8005756 <_printf_common+0x8e>
	...

080057a4 <_printf_i>:
 80057a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	7e0f      	ldrb	r7, [r1, #24]
 80057aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057ac:	2f78      	cmp	r7, #120	; 0x78
 80057ae:	4691      	mov	r9, r2
 80057b0:	4680      	mov	r8, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	469a      	mov	sl, r3
 80057b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ba:	d807      	bhi.n	80057cc <_printf_i+0x28>
 80057bc:	2f62      	cmp	r7, #98	; 0x62
 80057be:	d80a      	bhi.n	80057d6 <_printf_i+0x32>
 80057c0:	2f00      	cmp	r7, #0
 80057c2:	f000 80d8 	beq.w	8005976 <_printf_i+0x1d2>
 80057c6:	2f58      	cmp	r7, #88	; 0x58
 80057c8:	f000 80a3 	beq.w	8005912 <_printf_i+0x16e>
 80057cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057d4:	e03a      	b.n	800584c <_printf_i+0xa8>
 80057d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057da:	2b15      	cmp	r3, #21
 80057dc:	d8f6      	bhi.n	80057cc <_printf_i+0x28>
 80057de:	a101      	add	r1, pc, #4	; (adr r1, 80057e4 <_printf_i+0x40>)
 80057e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	08005851 	.word	0x08005851
 80057ec:	080057cd 	.word	0x080057cd
 80057f0:	080057cd 	.word	0x080057cd
 80057f4:	080057cd 	.word	0x080057cd
 80057f8:	080057cd 	.word	0x080057cd
 80057fc:	08005851 	.word	0x08005851
 8005800:	080057cd 	.word	0x080057cd
 8005804:	080057cd 	.word	0x080057cd
 8005808:	080057cd 	.word	0x080057cd
 800580c:	080057cd 	.word	0x080057cd
 8005810:	0800595d 	.word	0x0800595d
 8005814:	08005881 	.word	0x08005881
 8005818:	0800593f 	.word	0x0800593f
 800581c:	080057cd 	.word	0x080057cd
 8005820:	080057cd 	.word	0x080057cd
 8005824:	0800597f 	.word	0x0800597f
 8005828:	080057cd 	.word	0x080057cd
 800582c:	08005881 	.word	0x08005881
 8005830:	080057cd 	.word	0x080057cd
 8005834:	080057cd 	.word	0x080057cd
 8005838:	08005947 	.word	0x08005947
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	1d1a      	adds	r2, r3, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	602a      	str	r2, [r5, #0]
 8005844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800584c:	2301      	movs	r3, #1
 800584e:	e0a3      	b.n	8005998 <_printf_i+0x1f4>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	6829      	ldr	r1, [r5, #0]
 8005854:	0606      	lsls	r6, r0, #24
 8005856:	f101 0304 	add.w	r3, r1, #4
 800585a:	d50a      	bpl.n	8005872 <_printf_i+0xce>
 800585c:	680e      	ldr	r6, [r1, #0]
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	2e00      	cmp	r6, #0
 8005862:	da03      	bge.n	800586c <_printf_i+0xc8>
 8005864:	232d      	movs	r3, #45	; 0x2d
 8005866:	4276      	negs	r6, r6
 8005868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586c:	485e      	ldr	r0, [pc, #376]	; (80059e8 <_printf_i+0x244>)
 800586e:	230a      	movs	r3, #10
 8005870:	e019      	b.n	80058a6 <_printf_i+0x102>
 8005872:	680e      	ldr	r6, [r1, #0]
 8005874:	602b      	str	r3, [r5, #0]
 8005876:	f010 0f40 	tst.w	r0, #64	; 0x40
 800587a:	bf18      	it	ne
 800587c:	b236      	sxthne	r6, r6
 800587e:	e7ef      	b.n	8005860 <_printf_i+0xbc>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	6820      	ldr	r0, [r4, #0]
 8005884:	1d19      	adds	r1, r3, #4
 8005886:	6029      	str	r1, [r5, #0]
 8005888:	0601      	lsls	r1, r0, #24
 800588a:	d501      	bpl.n	8005890 <_printf_i+0xec>
 800588c:	681e      	ldr	r6, [r3, #0]
 800588e:	e002      	b.n	8005896 <_printf_i+0xf2>
 8005890:	0646      	lsls	r6, r0, #25
 8005892:	d5fb      	bpl.n	800588c <_printf_i+0xe8>
 8005894:	881e      	ldrh	r6, [r3, #0]
 8005896:	4854      	ldr	r0, [pc, #336]	; (80059e8 <_printf_i+0x244>)
 8005898:	2f6f      	cmp	r7, #111	; 0x6f
 800589a:	bf0c      	ite	eq
 800589c:	2308      	moveq	r3, #8
 800589e:	230a      	movne	r3, #10
 80058a0:	2100      	movs	r1, #0
 80058a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058a6:	6865      	ldr	r5, [r4, #4]
 80058a8:	60a5      	str	r5, [r4, #8]
 80058aa:	2d00      	cmp	r5, #0
 80058ac:	bfa2      	ittt	ge
 80058ae:	6821      	ldrge	r1, [r4, #0]
 80058b0:	f021 0104 	bicge.w	r1, r1, #4
 80058b4:	6021      	strge	r1, [r4, #0]
 80058b6:	b90e      	cbnz	r6, 80058bc <_printf_i+0x118>
 80058b8:	2d00      	cmp	r5, #0
 80058ba:	d04d      	beq.n	8005958 <_printf_i+0x1b4>
 80058bc:	4615      	mov	r5, r2
 80058be:	fbb6 f1f3 	udiv	r1, r6, r3
 80058c2:	fb03 6711 	mls	r7, r3, r1, r6
 80058c6:	5dc7      	ldrb	r7, [r0, r7]
 80058c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058cc:	4637      	mov	r7, r6
 80058ce:	42bb      	cmp	r3, r7
 80058d0:	460e      	mov	r6, r1
 80058d2:	d9f4      	bls.n	80058be <_printf_i+0x11a>
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d10b      	bne.n	80058f0 <_printf_i+0x14c>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	07de      	lsls	r6, r3, #31
 80058dc:	d508      	bpl.n	80058f0 <_printf_i+0x14c>
 80058de:	6923      	ldr	r3, [r4, #16]
 80058e0:	6861      	ldr	r1, [r4, #4]
 80058e2:	4299      	cmp	r1, r3
 80058e4:	bfde      	ittt	le
 80058e6:	2330      	movle	r3, #48	; 0x30
 80058e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058f0:	1b52      	subs	r2, r2, r5
 80058f2:	6122      	str	r2, [r4, #16]
 80058f4:	f8cd a000 	str.w	sl, [sp]
 80058f8:	464b      	mov	r3, r9
 80058fa:	aa03      	add	r2, sp, #12
 80058fc:	4621      	mov	r1, r4
 80058fe:	4640      	mov	r0, r8
 8005900:	f7ff fee2 	bl	80056c8 <_printf_common>
 8005904:	3001      	adds	r0, #1
 8005906:	d14c      	bne.n	80059a2 <_printf_i+0x1fe>
 8005908:	f04f 30ff 	mov.w	r0, #4294967295
 800590c:	b004      	add	sp, #16
 800590e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005912:	4835      	ldr	r0, [pc, #212]	; (80059e8 <_printf_i+0x244>)
 8005914:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005918:	6829      	ldr	r1, [r5, #0]
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005920:	6029      	str	r1, [r5, #0]
 8005922:	061d      	lsls	r5, r3, #24
 8005924:	d514      	bpl.n	8005950 <_printf_i+0x1ac>
 8005926:	07df      	lsls	r7, r3, #31
 8005928:	bf44      	itt	mi
 800592a:	f043 0320 	orrmi.w	r3, r3, #32
 800592e:	6023      	strmi	r3, [r4, #0]
 8005930:	b91e      	cbnz	r6, 800593a <_printf_i+0x196>
 8005932:	6823      	ldr	r3, [r4, #0]
 8005934:	f023 0320 	bic.w	r3, r3, #32
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	2310      	movs	r3, #16
 800593c:	e7b0      	b.n	80058a0 <_printf_i+0xfc>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	f043 0320 	orr.w	r3, r3, #32
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	2378      	movs	r3, #120	; 0x78
 8005948:	4828      	ldr	r0, [pc, #160]	; (80059ec <_printf_i+0x248>)
 800594a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800594e:	e7e3      	b.n	8005918 <_printf_i+0x174>
 8005950:	0659      	lsls	r1, r3, #25
 8005952:	bf48      	it	mi
 8005954:	b2b6      	uxthmi	r6, r6
 8005956:	e7e6      	b.n	8005926 <_printf_i+0x182>
 8005958:	4615      	mov	r5, r2
 800595a:	e7bb      	b.n	80058d4 <_printf_i+0x130>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	6826      	ldr	r6, [r4, #0]
 8005960:	6961      	ldr	r1, [r4, #20]
 8005962:	1d18      	adds	r0, r3, #4
 8005964:	6028      	str	r0, [r5, #0]
 8005966:	0635      	lsls	r5, r6, #24
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	d501      	bpl.n	8005970 <_printf_i+0x1cc>
 800596c:	6019      	str	r1, [r3, #0]
 800596e:	e002      	b.n	8005976 <_printf_i+0x1d2>
 8005970:	0670      	lsls	r0, r6, #25
 8005972:	d5fb      	bpl.n	800596c <_printf_i+0x1c8>
 8005974:	8019      	strh	r1, [r3, #0]
 8005976:	2300      	movs	r3, #0
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	4615      	mov	r5, r2
 800597c:	e7ba      	b.n	80058f4 <_printf_i+0x150>
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	1d1a      	adds	r2, r3, #4
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	681d      	ldr	r5, [r3, #0]
 8005986:	6862      	ldr	r2, [r4, #4]
 8005988:	2100      	movs	r1, #0
 800598a:	4628      	mov	r0, r5
 800598c:	f7fa fc20 	bl	80001d0 <memchr>
 8005990:	b108      	cbz	r0, 8005996 <_printf_i+0x1f2>
 8005992:	1b40      	subs	r0, r0, r5
 8005994:	6060      	str	r0, [r4, #4]
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	6123      	str	r3, [r4, #16]
 800599a:	2300      	movs	r3, #0
 800599c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a0:	e7a8      	b.n	80058f4 <_printf_i+0x150>
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	462a      	mov	r2, r5
 80059a6:	4649      	mov	r1, r9
 80059a8:	4640      	mov	r0, r8
 80059aa:	47d0      	blx	sl
 80059ac:	3001      	adds	r0, #1
 80059ae:	d0ab      	beq.n	8005908 <_printf_i+0x164>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	079b      	lsls	r3, r3, #30
 80059b4:	d413      	bmi.n	80059de <_printf_i+0x23a>
 80059b6:	68e0      	ldr	r0, [r4, #12]
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	4298      	cmp	r0, r3
 80059bc:	bfb8      	it	lt
 80059be:	4618      	movlt	r0, r3
 80059c0:	e7a4      	b.n	800590c <_printf_i+0x168>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4632      	mov	r2, r6
 80059c6:	4649      	mov	r1, r9
 80059c8:	4640      	mov	r0, r8
 80059ca:	47d0      	blx	sl
 80059cc:	3001      	adds	r0, #1
 80059ce:	d09b      	beq.n	8005908 <_printf_i+0x164>
 80059d0:	3501      	adds	r5, #1
 80059d2:	68e3      	ldr	r3, [r4, #12]
 80059d4:	9903      	ldr	r1, [sp, #12]
 80059d6:	1a5b      	subs	r3, r3, r1
 80059d8:	42ab      	cmp	r3, r5
 80059da:	dcf2      	bgt.n	80059c2 <_printf_i+0x21e>
 80059dc:	e7eb      	b.n	80059b6 <_printf_i+0x212>
 80059de:	2500      	movs	r5, #0
 80059e0:	f104 0619 	add.w	r6, r4, #25
 80059e4:	e7f5      	b.n	80059d2 <_printf_i+0x22e>
 80059e6:	bf00      	nop
 80059e8:	08005d29 	.word	0x08005d29
 80059ec:	08005d3a 	.word	0x08005d3a

080059f0 <memcpy>:
 80059f0:	440a      	add	r2, r1
 80059f2:	4291      	cmp	r1, r2
 80059f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059f8:	d100      	bne.n	80059fc <memcpy+0xc>
 80059fa:	4770      	bx	lr
 80059fc:	b510      	push	{r4, lr}
 80059fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a06:	4291      	cmp	r1, r2
 8005a08:	d1f9      	bne.n	80059fe <memcpy+0xe>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <memmove>:
 8005a0c:	4288      	cmp	r0, r1
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	eb01 0402 	add.w	r4, r1, r2
 8005a14:	d902      	bls.n	8005a1c <memmove+0x10>
 8005a16:	4284      	cmp	r4, r0
 8005a18:	4623      	mov	r3, r4
 8005a1a:	d807      	bhi.n	8005a2c <memmove+0x20>
 8005a1c:	1e43      	subs	r3, r0, #1
 8005a1e:	42a1      	cmp	r1, r4
 8005a20:	d008      	beq.n	8005a34 <memmove+0x28>
 8005a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a2a:	e7f8      	b.n	8005a1e <memmove+0x12>
 8005a2c:	4402      	add	r2, r0
 8005a2e:	4601      	mov	r1, r0
 8005a30:	428a      	cmp	r2, r1
 8005a32:	d100      	bne.n	8005a36 <memmove+0x2a>
 8005a34:	bd10      	pop	{r4, pc}
 8005a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a3e:	e7f7      	b.n	8005a30 <memmove+0x24>

08005a40 <_free_r>:
 8005a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a42:	2900      	cmp	r1, #0
 8005a44:	d044      	beq.n	8005ad0 <_free_r+0x90>
 8005a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a4a:	9001      	str	r0, [sp, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a52:	bfb8      	it	lt
 8005a54:	18e4      	addlt	r4, r4, r3
 8005a56:	f000 f913 	bl	8005c80 <__malloc_lock>
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <_free_r+0x94>)
 8005a5c:	9801      	ldr	r0, [sp, #4]
 8005a5e:	6813      	ldr	r3, [r2, #0]
 8005a60:	b933      	cbnz	r3, 8005a70 <_free_r+0x30>
 8005a62:	6063      	str	r3, [r4, #4]
 8005a64:	6014      	str	r4, [r2, #0]
 8005a66:	b003      	add	sp, #12
 8005a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a6c:	f000 b90e 	b.w	8005c8c <__malloc_unlock>
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d908      	bls.n	8005a86 <_free_r+0x46>
 8005a74:	6825      	ldr	r5, [r4, #0]
 8005a76:	1961      	adds	r1, r4, r5
 8005a78:	428b      	cmp	r3, r1
 8005a7a:	bf01      	itttt	eq
 8005a7c:	6819      	ldreq	r1, [r3, #0]
 8005a7e:	685b      	ldreq	r3, [r3, #4]
 8005a80:	1949      	addeq	r1, r1, r5
 8005a82:	6021      	streq	r1, [r4, #0]
 8005a84:	e7ed      	b.n	8005a62 <_free_r+0x22>
 8005a86:	461a      	mov	r2, r3
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b10b      	cbz	r3, 8005a90 <_free_r+0x50>
 8005a8c:	42a3      	cmp	r3, r4
 8005a8e:	d9fa      	bls.n	8005a86 <_free_r+0x46>
 8005a90:	6811      	ldr	r1, [r2, #0]
 8005a92:	1855      	adds	r5, r2, r1
 8005a94:	42a5      	cmp	r5, r4
 8005a96:	d10b      	bne.n	8005ab0 <_free_r+0x70>
 8005a98:	6824      	ldr	r4, [r4, #0]
 8005a9a:	4421      	add	r1, r4
 8005a9c:	1854      	adds	r4, r2, r1
 8005a9e:	42a3      	cmp	r3, r4
 8005aa0:	6011      	str	r1, [r2, #0]
 8005aa2:	d1e0      	bne.n	8005a66 <_free_r+0x26>
 8005aa4:	681c      	ldr	r4, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	6053      	str	r3, [r2, #4]
 8005aaa:	4421      	add	r1, r4
 8005aac:	6011      	str	r1, [r2, #0]
 8005aae:	e7da      	b.n	8005a66 <_free_r+0x26>
 8005ab0:	d902      	bls.n	8005ab8 <_free_r+0x78>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	6003      	str	r3, [r0, #0]
 8005ab6:	e7d6      	b.n	8005a66 <_free_r+0x26>
 8005ab8:	6825      	ldr	r5, [r4, #0]
 8005aba:	1961      	adds	r1, r4, r5
 8005abc:	428b      	cmp	r3, r1
 8005abe:	bf04      	itt	eq
 8005ac0:	6819      	ldreq	r1, [r3, #0]
 8005ac2:	685b      	ldreq	r3, [r3, #4]
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	bf04      	itt	eq
 8005ac8:	1949      	addeq	r1, r1, r5
 8005aca:	6021      	streq	r1, [r4, #0]
 8005acc:	6054      	str	r4, [r2, #4]
 8005ace:	e7ca      	b.n	8005a66 <_free_r+0x26>
 8005ad0:	b003      	add	sp, #12
 8005ad2:	bd30      	pop	{r4, r5, pc}
 8005ad4:	2000021c 	.word	0x2000021c

08005ad8 <sbrk_aligned>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	4e0e      	ldr	r6, [pc, #56]	; (8005b14 <sbrk_aligned+0x3c>)
 8005adc:	460c      	mov	r4, r1
 8005ade:	6831      	ldr	r1, [r6, #0]
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	b911      	cbnz	r1, 8005aea <sbrk_aligned+0x12>
 8005ae4:	f000 f8bc 	bl	8005c60 <_sbrk_r>
 8005ae8:	6030      	str	r0, [r6, #0]
 8005aea:	4621      	mov	r1, r4
 8005aec:	4628      	mov	r0, r5
 8005aee:	f000 f8b7 	bl	8005c60 <_sbrk_r>
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	d00a      	beq.n	8005b0c <sbrk_aligned+0x34>
 8005af6:	1cc4      	adds	r4, r0, #3
 8005af8:	f024 0403 	bic.w	r4, r4, #3
 8005afc:	42a0      	cmp	r0, r4
 8005afe:	d007      	beq.n	8005b10 <sbrk_aligned+0x38>
 8005b00:	1a21      	subs	r1, r4, r0
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 f8ac 	bl	8005c60 <_sbrk_r>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d101      	bne.n	8005b10 <sbrk_aligned+0x38>
 8005b0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005b10:	4620      	mov	r0, r4
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	20000220 	.word	0x20000220

08005b18 <_malloc_r>:
 8005b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1c:	1ccd      	adds	r5, r1, #3
 8005b1e:	f025 0503 	bic.w	r5, r5, #3
 8005b22:	3508      	adds	r5, #8
 8005b24:	2d0c      	cmp	r5, #12
 8005b26:	bf38      	it	cc
 8005b28:	250c      	movcc	r5, #12
 8005b2a:	2d00      	cmp	r5, #0
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	db01      	blt.n	8005b34 <_malloc_r+0x1c>
 8005b30:	42a9      	cmp	r1, r5
 8005b32:	d905      	bls.n	8005b40 <_malloc_r+0x28>
 8005b34:	230c      	movs	r3, #12
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	2600      	movs	r6, #0
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	4e2e      	ldr	r6, [pc, #184]	; (8005bfc <_malloc_r+0xe4>)
 8005b42:	f000 f89d 	bl	8005c80 <__malloc_lock>
 8005b46:	6833      	ldr	r3, [r6, #0]
 8005b48:	461c      	mov	r4, r3
 8005b4a:	bb34      	cbnz	r4, 8005b9a <_malloc_r+0x82>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4638      	mov	r0, r7
 8005b50:	f7ff ffc2 	bl	8005ad8 <sbrk_aligned>
 8005b54:	1c43      	adds	r3, r0, #1
 8005b56:	4604      	mov	r4, r0
 8005b58:	d14d      	bne.n	8005bf6 <_malloc_r+0xde>
 8005b5a:	6834      	ldr	r4, [r6, #0]
 8005b5c:	4626      	mov	r6, r4
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	d140      	bne.n	8005be4 <_malloc_r+0xcc>
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	4631      	mov	r1, r6
 8005b66:	4638      	mov	r0, r7
 8005b68:	eb04 0803 	add.w	r8, r4, r3
 8005b6c:	f000 f878 	bl	8005c60 <_sbrk_r>
 8005b70:	4580      	cmp	r8, r0
 8005b72:	d13a      	bne.n	8005bea <_malloc_r+0xd2>
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	3503      	adds	r5, #3
 8005b78:	1a6d      	subs	r5, r5, r1
 8005b7a:	f025 0503 	bic.w	r5, r5, #3
 8005b7e:	3508      	adds	r5, #8
 8005b80:	2d0c      	cmp	r5, #12
 8005b82:	bf38      	it	cc
 8005b84:	250c      	movcc	r5, #12
 8005b86:	4629      	mov	r1, r5
 8005b88:	4638      	mov	r0, r7
 8005b8a:	f7ff ffa5 	bl	8005ad8 <sbrk_aligned>
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d02b      	beq.n	8005bea <_malloc_r+0xd2>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	442b      	add	r3, r5
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	e00e      	b.n	8005bb8 <_malloc_r+0xa0>
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	1b52      	subs	r2, r2, r5
 8005b9e:	d41e      	bmi.n	8005bde <_malloc_r+0xc6>
 8005ba0:	2a0b      	cmp	r2, #11
 8005ba2:	d916      	bls.n	8005bd2 <_malloc_r+0xba>
 8005ba4:	1961      	adds	r1, r4, r5
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	6025      	str	r5, [r4, #0]
 8005baa:	bf18      	it	ne
 8005bac:	6059      	strne	r1, [r3, #4]
 8005bae:	6863      	ldr	r3, [r4, #4]
 8005bb0:	bf08      	it	eq
 8005bb2:	6031      	streq	r1, [r6, #0]
 8005bb4:	5162      	str	r2, [r4, r5]
 8005bb6:	604b      	str	r3, [r1, #4]
 8005bb8:	4638      	mov	r0, r7
 8005bba:	f104 060b 	add.w	r6, r4, #11
 8005bbe:	f000 f865 	bl	8005c8c <__malloc_unlock>
 8005bc2:	f026 0607 	bic.w	r6, r6, #7
 8005bc6:	1d23      	adds	r3, r4, #4
 8005bc8:	1af2      	subs	r2, r6, r3
 8005bca:	d0b6      	beq.n	8005b3a <_malloc_r+0x22>
 8005bcc:	1b9b      	subs	r3, r3, r6
 8005bce:	50a3      	str	r3, [r4, r2]
 8005bd0:	e7b3      	b.n	8005b3a <_malloc_r+0x22>
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	bf0c      	ite	eq
 8005bd8:	6032      	streq	r2, [r6, #0]
 8005bda:	605a      	strne	r2, [r3, #4]
 8005bdc:	e7ec      	b.n	8005bb8 <_malloc_r+0xa0>
 8005bde:	4623      	mov	r3, r4
 8005be0:	6864      	ldr	r4, [r4, #4]
 8005be2:	e7b2      	b.n	8005b4a <_malloc_r+0x32>
 8005be4:	4634      	mov	r4, r6
 8005be6:	6876      	ldr	r6, [r6, #4]
 8005be8:	e7b9      	b.n	8005b5e <_malloc_r+0x46>
 8005bea:	230c      	movs	r3, #12
 8005bec:	603b      	str	r3, [r7, #0]
 8005bee:	4638      	mov	r0, r7
 8005bf0:	f000 f84c 	bl	8005c8c <__malloc_unlock>
 8005bf4:	e7a1      	b.n	8005b3a <_malloc_r+0x22>
 8005bf6:	6025      	str	r5, [r4, #0]
 8005bf8:	e7de      	b.n	8005bb8 <_malloc_r+0xa0>
 8005bfa:	bf00      	nop
 8005bfc:	2000021c 	.word	0x2000021c

08005c00 <_realloc_r>:
 8005c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c04:	4680      	mov	r8, r0
 8005c06:	4614      	mov	r4, r2
 8005c08:	460e      	mov	r6, r1
 8005c0a:	b921      	cbnz	r1, 8005c16 <_realloc_r+0x16>
 8005c0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c10:	4611      	mov	r1, r2
 8005c12:	f7ff bf81 	b.w	8005b18 <_malloc_r>
 8005c16:	b92a      	cbnz	r2, 8005c24 <_realloc_r+0x24>
 8005c18:	f7ff ff12 	bl	8005a40 <_free_r>
 8005c1c:	4625      	mov	r5, r4
 8005c1e:	4628      	mov	r0, r5
 8005c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c24:	f000 f838 	bl	8005c98 <_malloc_usable_size_r>
 8005c28:	4284      	cmp	r4, r0
 8005c2a:	4607      	mov	r7, r0
 8005c2c:	d802      	bhi.n	8005c34 <_realloc_r+0x34>
 8005c2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c32:	d812      	bhi.n	8005c5a <_realloc_r+0x5a>
 8005c34:	4621      	mov	r1, r4
 8005c36:	4640      	mov	r0, r8
 8005c38:	f7ff ff6e 	bl	8005b18 <_malloc_r>
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d0ed      	beq.n	8005c1e <_realloc_r+0x1e>
 8005c42:	42bc      	cmp	r4, r7
 8005c44:	4622      	mov	r2, r4
 8005c46:	4631      	mov	r1, r6
 8005c48:	bf28      	it	cs
 8005c4a:	463a      	movcs	r2, r7
 8005c4c:	f7ff fed0 	bl	80059f0 <memcpy>
 8005c50:	4631      	mov	r1, r6
 8005c52:	4640      	mov	r0, r8
 8005c54:	f7ff fef4 	bl	8005a40 <_free_r>
 8005c58:	e7e1      	b.n	8005c1e <_realloc_r+0x1e>
 8005c5a:	4635      	mov	r5, r6
 8005c5c:	e7df      	b.n	8005c1e <_realloc_r+0x1e>
	...

08005c60 <_sbrk_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d06      	ldr	r5, [pc, #24]	; (8005c7c <_sbrk_r+0x1c>)
 8005c64:	2300      	movs	r3, #0
 8005c66:	4604      	mov	r4, r0
 8005c68:	4608      	mov	r0, r1
 8005c6a:	602b      	str	r3, [r5, #0]
 8005c6c:	f7fb f856 	bl	8000d1c <_sbrk>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	d102      	bne.n	8005c7a <_sbrk_r+0x1a>
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	b103      	cbz	r3, 8005c7a <_sbrk_r+0x1a>
 8005c78:	6023      	str	r3, [r4, #0]
 8005c7a:	bd38      	pop	{r3, r4, r5, pc}
 8005c7c:	20000224 	.word	0x20000224

08005c80 <__malloc_lock>:
 8005c80:	4801      	ldr	r0, [pc, #4]	; (8005c88 <__malloc_lock+0x8>)
 8005c82:	f000 b811 	b.w	8005ca8 <__retarget_lock_acquire_recursive>
 8005c86:	bf00      	nop
 8005c88:	20000228 	.word	0x20000228

08005c8c <__malloc_unlock>:
 8005c8c:	4801      	ldr	r0, [pc, #4]	; (8005c94 <__malloc_unlock+0x8>)
 8005c8e:	f000 b80c 	b.w	8005caa <__retarget_lock_release_recursive>
 8005c92:	bf00      	nop
 8005c94:	20000228 	.word	0x20000228

08005c98 <_malloc_usable_size_r>:
 8005c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c9c:	1f18      	subs	r0, r3, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bfbc      	itt	lt
 8005ca2:	580b      	ldrlt	r3, [r1, r0]
 8005ca4:	18c0      	addlt	r0, r0, r3
 8005ca6:	4770      	bx	lr

08005ca8 <__retarget_lock_acquire_recursive>:
 8005ca8:	4770      	bx	lr

08005caa <__retarget_lock_release_recursive>:
 8005caa:	4770      	bx	lr

08005cac <_init>:
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cae:	bf00      	nop
 8005cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb2:	bc08      	pop	{r3}
 8005cb4:	469e      	mov	lr, r3
 8005cb6:	4770      	bx	lr

08005cb8 <_fini>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	bf00      	nop
 8005cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cbe:	bc08      	pop	{r3}
 8005cc0:	469e      	mov	lr, r3
 8005cc2:	4770      	bx	lr
